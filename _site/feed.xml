<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hardened GNU/Linux</title>
    <description>We are a group of free software enthusiasts, anarchists, cyber security researchers. Long live anarchy! Long live 0ld sch00l!!! A small step in security hardening --&gt; A giant leap in Free &amp; Open source software!!!
</description>
    <link>http://www.hardenedlinux.org/</link>
    <atom:link href="http://www.hardenedlinux.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 09 May 2016 00:04:17 +0800</pubDate>
    <lastBuildDate>Mon, 09 May 2016 00:04:17 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>关于RAP的FAQ</title>
        <description>&lt;p&gt;&lt;strong&gt;原文：&lt;a href=&quot;https://grsecurity.net/rap_faq.php&quot;&gt;关于RAP的FAQ&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作者：The PaX team and Spender&lt;/p&gt;

&lt;p&gt;译者：citypw( Shawn C)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Shawn: 2016年4月28日下午三点，PaX/Grsecurity正式公布了针对Linux内核4.5里的新特性：RAP。RAP是一种在Linux内核层面上的CFI（控制流完整性）的实现，致力于完全消灭代码重用攻击这种漏洞利用的方式，RAP的发布是系统安全领域的又一里程碑，这意味着自&lt;a href=&quot;http://hardenedlinux.org/system-security/2015/05/23/archeological_hacking_on_pax.html&quot;&gt;2003年PaX team谈“未来”&lt;/a&gt;至今，只剩下data-only attack并未完全解决，从技术选型，研究，开发和测试发布，PaX team一共历经5年左右的时间，&lt;a href=&quot;https://pax.grsecurity.net/docs/PaXTeam-H2HC15-RAP-RIP-ROP.pdf&quot;&gt;RAP第一次亮相是去年的H2HC&lt;/a&gt;，这次公开发布的版本虽然只支持x86_64，没有经过连接时优化，编译时的静态分析以及返回地址保护等重要feature，但足以适应于大部分的场景，公开的版本是基于GPLv2自由软件许可证发布的。另外PaX/Grsecurity的下一个稳定版选为4.4，3.14的稳定版会一直维护到2017年年底。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;什么是代码重用攻击？为什么能对抗防御到现在？&lt;/h3&gt;

&lt;p&gt;要解释整个故事，我们需要了解一些历史背景。从1990年代晚期开始，memory corruption漏洞的漏洞利用大规模的使用了被称为“shellcode”的技术去实现对应用程序的完整控制。2000年，PaX team发布了&lt;a href=&quot;http://hardenedlinux.org/system-security/2015/05/25/pageexec-old.html&quot;&gt;PAGEEXEC&lt;/a&gt;和&lt;a href=&quot;http://hardenedlinux.org/system-security/2016/03/14/mprotect.html&quot;&gt;MPROTECT&lt;/a&gt;，shellcode的使用（或者更精确的说法是，攻击者引入的任意代码）成为了不可能。&lt;/p&gt;

&lt;p&gt;数年之后，业界基本赶上（处理器中的NX，Windows的DEP, etc），尽管一些操作系统仍然没有完全提供MPROTECT同等级的防护功能，因此每隔几年就会出现聪明的绕过技术。早在2000年引进PAGEEXEC的时候，另一种漏洞利用的类型变得显而易见 – 最初被称为“&lt;a href=&quot;http://seclists.org/bugtraq/1997/Aug/63&quot;&gt;ret2libc&lt;/a&gt;”，然后进化为“&lt;a href=&quot;https://dl.packetstormsecurity.net/papers/bypass/no-nx.pdf&quot;&gt;borrowed code chunks&lt;/a&gt;”，终于正式成为“ROP” – 攻击者可以重用现有在应用程序的代码而不是引入新的代码来达到同样的目的。例如，system()函数存在于glibc库，所以相比使用shellcode来执行一个shell，一个漏洞利用也可以从任何位置去重定向程序去执行现有的system()函数去强制执行一个shell。&lt;/p&gt;

&lt;p&gt;2001年，PaX team开创了众所周知的地址空间布局随机化(ASLR)作为一种简单而廉价的概率性防御手段对抗此种被更多称为代码重用的攻击。代码重用攻击需要知道一些现有执行代码的地址（比如system()函数的地址），ASLR让攻击者更难精准的找到这些地址。而问题在于ASLR只是一个非常简单的设计和实现，它有一个致命的弱点：信息泄漏。一旦攻击者知道或者推断出代码的位置，在很多场景下漏洞利用可以动态的调整自身让ASLR完全失效。这类泄漏也提高了对于代码可能无法预先知道的内容这类场景的可靠性（比如使用不同的系统上运行不同版本的同一个库）。&lt;/p&gt;

&lt;p&gt;自从2003年PaX team公布了&lt;a href=&quot;https://pax.grsecurity.net/docs/pax-future.txt&quot;&gt;pax-future.txt&lt;/a&gt;后，学术界和工业界急于解决这类问题，一个在pax-future.txt中描述过的但被形式化的版本于2年后的2005年成为了众所周知CFI（控制流完整性）。很多学术界的论文和工业界针对这个问题的一些子集进行了研究而产出的防御方案但都被轻松的击败和绕过了。包括微软和Google在内没有一个方案能同时完成3件事情：任意大小的codebase，速度快以及足够安全去防御整个类型的攻击。这里带我们进入RAP( Reuse Attack Protector)。&lt;/p&gt;

&lt;h3 id=&quot;rap&quot;&gt;是什么让RAP那么重要？&lt;/h3&gt;

&lt;p&gt;同时实现上面3点的难度并没有被业界正确的理解。一开始的CFI实现和那些甚至今天还在使用的（比如微软的CFI或者Google的间接函数调用检查）实现都是”forward-edge” CFI。这意味着他们的实现仅在转跳和调用一个具体函数时才会进行安全检查，但对于函数的返回并没有任何安全检查。虽然像SSP这种保护机制已经存在多年，但他们并不是一个真正能抵御针对函数的返回的防御方案，SSP的设计思想和类似的防御方案（比如微软的/GS）是用一个”canary”(Shawn注：直译为金丝雀，矿工使用金丝雀探测矿井里是否有一氧化碳，在本文翻译中如果上下文是canary技术则不做翻译）值放在临近返回地址的地方。在一些栈缓冲区溢出的事件中，canary是放在溢出的缓冲区和目标返回地址之间，canary可以直接被覆盖。就像金丝雀在矿工受伤害前探测到一氧化碳一样，SSP在函数返回前，canary的值会被检查以保证返回地址没有受到影响。但这些方案在3个主要的问题里困了多年：1) 不是所有的场景都需要覆盖canary来改写返回地址，2) canary的值可以被类似我们讨论过的ASLR地址泄漏的方式被泄漏，3) 由于性能的考虑，这些未经优化的实现并没有对应该保护的函数进行防护。&lt;/p&gt;

&lt;p&gt;RAP定义了一个威胁模型：假设攻击者已经具有最强大的“漏洞利用元素“：具有针对内存读和写任意次数的能力。其他的代码重用攻击方案没有在这个威胁模型下去设计，所以它们失败的地方对于RAP无效。对于这个现实的威胁模型，像ASLR和/GS类的技术已经无效。&lt;/p&gt;

&lt;p&gt;回到CFI的议题，另外一个学术界困扰很久的问题是安全和性能之间的平衡。很多forward-edge CFI实现也被称为粗粒度CFI。即一个特定的调用或者转跳进入一个函数，CFI的实现将允许攻击者调用的数量非常大：包括程序以外的合法的执行调用和在程序和库里的。这些粗粒度实现有两个原因：性能和信息限制。更细粒度的实现通常会为每次调用和转跳带来更多的安全检查。特定的C++程序会需要那些检查，这会损害性能。相应的，特别对于那些不需要源代码的CFI方法会让分类方法难以满足不引入误报的提前下实现调用目标集合最小化的需求。&lt;/p&gt;

&lt;p&gt;尝试解决这个问题让大多数CFI掉进了另外一个坑：扩展性。要对函数进行分类，这些实现都需要通过链接时优化（LTO）的编译技术来一次性获得内存中整个程序的信息。对于小的codebase这不是一个问题，但对于像Linux内核或者Chromium浏览器（Google自己的CFI也是一样）就是非常大的约束。&lt;/p&gt;

&lt;p&gt;最终，一些现有的CFI实现（主要是那些由Google开发的）只针对C/C++的一些细分领域：一些不保护C函数指针，另外一些只保护virtual calls，没有任何实现有返回地址保护。要对比这些弱实现的性能的话，你需要把它们单独的性能损耗加在一起和RAP进行比较以及再加上返回地址保护。&lt;/p&gt;

&lt;p&gt;有一些关键点是让RAP成为最好的代码重用攻击的防护方案。RAP能抵御之前提到的所有攻击，即使在攻击者有最有价值的memory corruption漏洞的情况下。它在编译器适当的层面上被实现，RAP放在编译器的足够前面阶段让编译器可以针对RAP所做出的改变进行优化从而提升性能。RAP知道什么时候应该加安全检查，更重要的是RAP知道那些检查应该去掉而不降低防御级别。RAP执行每个地址的检查都快于其他的CFI实现，这意味着不用降低覆盖率去提升性能，它甚至能在比其他CFI实现具有更高安全性的同时性能也更优。RAP尽最大可能的精确的分类函数里的特定调用和转跳，具有使用简单的代码修改进而限制分类组的能力。它以这种方式不需要获得所有关于程序在内存的信息从而可以展应用到很大的codebase的场景。&lt;/p&gt;

&lt;h3 id=&quot;rap-1&quot;&gt;RAP怎么样工作？&lt;/h3&gt;

&lt;p&gt;RAP是以GCC编译器插件的形式实现的。这意味着你不需要使用特定定制过的编译器，你可以使用你的GNU/Linux发行版或者嵌入式厂商提供的任意版本的GCC。RAP的商业版具有两个组件。第一个组件是确定性防御限制从特定地址去调用的函数和函数返回的地址。第二个组件是概率性防御帮助保证一个函数可以返回的不仅仅是一个由第一组件定义的不同调用的组，事实上只能返回到这个函数被调用的地址。&lt;/p&gt;

&lt;p&gt;第一防御从程序里使用类型信息和使用了一个hash函数创建一个hashes的集合，这样hash的数量就接近于被程序使用的不同的函数类型的数量。之前提到过RAP也可以使用简单的代码修改去增加颗粒度。比如多个函数存在接受一个字符串参数但不返回值。RAP可以使用C/C++的能力去赋予已知类型不同的名字，比如“sensitive_string”分离这一组函数为两个而保持相同代码的语义。因为基于类型信息的hash，所有RAP需要的信息都可以在一个单独的编译单元中获得，这比（其他CFI实现）需要所有关于程序的信息更实用。&lt;/p&gt;

&lt;p&gt;第二防御更复杂一些，当进入一个函数时本质上通过函数“加密“了返回地址以让之前的所有代码不能污染返回地址。用于加密返回地址的key存放在CPU的保留寄存器中，这通常情况下保证了key不会被泄漏。加密的返回地址也会保存在一个寄存器中。当一个函数返回，插件中instrumented code会解密已存在的地址（合法的或者攻击者修改过的），使用保留寄存器里的key进行解密，然后对比地址。如果两个不匹配，执行就终止了。一点注意：虽然用于加密的key不应该存在内存里，通过分离两种类型的信息泄漏是有可能推断出key的。这也是为什么确定性的基于类型的hash的RAP防护存在于函数返回的场景中。好消息是大部分的情况用于加密的key不需要在线程，进程或者内核的同一生命周期中出现。在内核里，每个系统调用使用一个新key。同理，无限循环比如内核调度器也使用的新key。这样可以限制信息泄漏带来的潜在风险。&lt;/p&gt;

&lt;p&gt;这里只是从比较抽象的层面来讲解RAP – 当然，为了高性能和高安全性必须做很多细节的实现：指令编码，使用快速指令序列做检查，复杂优化通过和知道怎么样和在哪里去掉安全检查而不牺牲安全性。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;关于指令不对齐？&lt;/h3&gt;

&lt;p&gt;一个RAP特性导致的不明显的结果是来自不对齐指令的威胁自然的消失了，不需要去实现性能压力的防御比如强制16-byte的指令对齐。当你去思考关于攻击的顺序时这个原因就会变得清晰：一个函数指针或者返回地址变成了攻击者修改后的指向一跳存在的指令中间而产生一些有用的无意的指令顺序。RAP确定性的保证了所有地址里，不论是潜在受污染的函数指针或者正在使用的返回地址（被称为间接流控制）只能转跳到合法的地址，因此它阻止了转跳到指令的中间或者其他不合法的地址。一个有趣的事实是类型hash编码也保证了一个函数不能返回到一个函数的开始，一个转跳和调用也不能直接移交控制到另外的调用和转跳。&lt;/p&gt;

&lt;h3 id=&quot;rap-2&quot;&gt;RAP如何处理共享库？&lt;/h3&gt;

&lt;p&gt;RAP的基于类型hash的决定性防御在处理共享库上比其他CFI实现更简单。一些细粒度的CFI必须在运行时（通常是加载库的时间）使用复杂，性能消耗大的算法。另外一些CFI方案在处理共享库上采用弱化函数分类，因此降低了安全防御能力。与此相反，因为所有的编译单元遵循同一个类型散列的创建标准，使用RAP的前提下在库里调用一个函数与在一个执行代码里间接调用一个函数并没有什么不同。&lt;/p&gt;

&lt;p&gt;RAP可以逐渐的引入更大的codebase。它是可能只使用函数的类型hash而不需要在调用和转跳的地方插入验证检查的代码。这样的话，在库依赖里的函数指针原型和调用（RAP会在编译时检测）之间的不匹配不会需要在应用程序成功运行前去修复。当然，简介控制流在发生在那些未修复的库不会受RAP的决定性类型hash防护。&lt;/p&gt;

&lt;h3 id=&quot;rapjit&quot;&gt;RAP如何处理JIT（即时编译）？&lt;/h3&gt;

&lt;p&gt;现有的JIT引擎在设计时并没有考虑安全。在运行时最安全的生成代码是通过强制把使用代码从创建代码中分离。这可以通过把JIT引擎分离进入单独的进程，这个工作&lt;a href=&quot;http://wenke.gtisc.gatech.edu/papers/sdcg.pdf&quot;&gt;SDCG&lt;/a&gt;已经完成。更进一步，JIT引擎需要修改可以让RAP生成可用hash和保证JIT编码不会允许攻击者有控制8个JIT输出连续bytes的余地，这样不会被利用成合法RAP hash。为一个C++ virtual call伪造RAP hash，攻击者需要控制16个连续的byte。被现代JIT实现使用的constant-blinding技术足以胜任。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;如何处理自由软件许可证？&lt;/h3&gt;

&lt;p&gt;支持GCC插件（比如RAP）的版本是基于GPLv3发布的。不像GPLv2，GPLv3允许一个版权拥有者（比如自由软件基金会）去创建特殊的许可证例外。在创建GCC插件支持，允许访问GCC内部的头文件和APIs，自由软件基金会想要避免GCC插件成为专利在市场上销售GCC开发者多年的工作成果。关于特定的例外，自由软件基金会的详细可见: http://www.gnu.org/licenses/gcc-exception-3.1.en.html&lt;/p&gt;

&lt;p&gt;In the exception, called the “GCC Runtime Library Exception”, it defines a term called “eligible compilation”. The FSF defines eligible compilation as a binary compiled with a toolchain where each component is licensed with something compatible with GCC’s GPLv3 license, where the components include GCC itself as well as any associated GCC plugins. The exception states that a binary may only be linked against the GCC runtime libraries (libgcc, libstdc++) if the binary was produced through the eligible compilation process. As the kernel is not linked with the GCC runtime libraries, this exception does not apply, and so the license of the public RAP demo is under the GPLv2. Since however the GPLv2 is incompatible with GPLv3, then this makes the userland binaries (which do link with the GCC runtime libraries) compiled through a non-eligible compilation process. Distributing these userland binaries would be illegal and would violate the copyright of the FSF (but not that of the PaX Team).&lt;/p&gt;

&lt;p&gt;作为RAP插件唯一的版权拥有者，PaX team仅针对RAP完整版以GPLv3许可证给商业用户以允许合法的编译用户空间的库。&lt;/p&gt;

&lt;p&gt;RAP商业版已经发布，有兴趣的可以联系 contact@grsecurity.net 询问详情。&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 00:00:00 +0800</pubDate>
        <link>http://www.hardenedlinux.org/system-security/2016/05/01/FAQ_about_RAP.html</link>
        <guid isPermaLink="true">http://www.hardenedlinux.org/system-security/2016/05/01/FAQ_about_RAP.html</guid>
        
        
        <category>system-security</category>
        
      </item>
    
      <item>
        <title>(A/T/KT) - Sanitized GNU/Linux: a new way of bug hunter in FLOSS Community</title>
        <description>&lt;p&gt;by n3o4po11o    &lt;/p&gt;

&lt;p&gt;Most of Gentoo installation STEPS in this article are &lt;strong&gt;COPY&lt;/strong&gt;   from &lt;a href=&quot;https://wiki.gentoo.org/wiki/Handbook:AMD64&quot;&gt;Gentoo Handbook&lt;/a&gt;[1]&lt;/p&gt;

&lt;p&gt;Use links show as below to download gentoo LiveCD: &lt;br /&gt;
Current-install-iso: &lt;br /&gt;
&lt;a href=&quot;http://distfiles.gentoo.org/releases/amd64/autobuilds/current-install-amd64-minimal/&quot;&gt;http://distfiles.gentoo.org/releases/amd64/autobuilds/current-install-amd64-minimal&lt;/a&gt; &lt;br /&gt;
After booing into liveCD, we can start to prepare for install system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the partitions(GPT)：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;parted -a optimal /dev/sda&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Use parted to configure &lt;em&gt;sda&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted)mklabel gpt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Setting the GPT label&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted)unit mib
(parted)mkpart primary 1 3
(parted)name 1 grub
(parted)set 1 bios_grub on&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating a partition start from 1MB and end at 3MB used by GRUB2BOOTLOADER&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted) mkpart primary 3 131
(parted) name 2 boot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating BOOT partition (128MB)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted) mkpart primary 131 1024
(parted) name 3 swap&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating swap partition&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted) mkpart primary 1024 -1
(parted) name 4 rootfs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating remaining disk as ROOTFS&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted) set 2 boot on
(parted) quit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Creating the partitions(MBR):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;livecd ~ # fdisk -t dos /dev/sda

Welcome to fdisk (util-linux 2.26.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.


Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-104857599, default 2048): 2048
Last sector, +sectors or +size{K,M,G,T,P} (2048-104857599, default 104857599):
+2M

Created a new partition 1 of type &amp;#39;Linux&amp;#39; and of size 2 MiB.

Command (m for help): n
Partition type
   p   primary (1 primary, 0 extended, 3 free)
   e   extended (container for logical partitions)
Select (default p): p
Partition number (2-4, default 2): 2
First sector (6144-104857599, default 6144): 
Last sector, +sectors or +size{K,M,G,T,P} (6144-104857599, default 104857599):
+128M

Created a new partition 2 of type &amp;#39;Linux&amp;#39; and of size 128 MiB.

Command (m for help): p
Disk /dev/sda: 50 GiB, 53687091200 bytes, 104857600 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xcc7ca523

Device     Boot Start    End Sectors  Size Id Type
/dev/sda1        2048   6143    4096    2M 83 Linux
/dev/sda2        6144 268287  262144  128M 83 Linux

Command (m for help): a
Partition number (1,2, default 2): 2

The bootable flag on partition 2 is enabled now.

Command (m for help): p
Disk /dev/sda: 50 GiB, 53687091200 bytes, 104857600 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xcc7ca523

Device     Boot Start    End Sectors  Size Id Type
/dev/sda1        2048   6143    4096    2M 83 Linux
/dev/sda2  *     6144 268287  262144  128M 83 Linux

Command (m for help): n
Partition type
   p   primary (2 primary, 0 extended, 2 free)
   e   extended (container for logical partitions)
Select (default p): p
Partition number (3,4, default 3): 
First sector (268288-104857599, default 268288):       
Last sector, +sectors or +size{K,M,G,T,P} (268288-104857599, default
104857599): +1024M

Created a new partition 3 of type &amp;#39;Linux&amp;#39; and of size 1 GiB.

Command (m for help): t
Partition number (1-3, default 3):3
Partition type (type L to list all types):82

Command (m for help): n
Partition type
   p   primary (3 primary, 0 extended, 1 free)
   e   extended (container for logical partitions)
Select (default e): p

Changed type of partition &amp;#39;Linux&amp;#39; to &amp;#39;Linux swap / Solaris&amp;#39;.

Selected partition 4
First sector (2365440-104857599, default 2365440): 
Last sector, +sectors or +size{K,M,G,T,P} (2365440-104857599, default
104857599): 

Created a new partition 4 of type &amp;#39;Linux&amp;#39; and of size 48.9 GiB.

Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Creating file systems：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;mkfs.ext2 /dev/sda2
mkfs.ext4 /dev/sda4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Formatting &lt;strong&gt;sda2&lt;/strong&gt; and &lt;strong&gt;sda4&lt;/strong&gt; in ext2 and ext4&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;mkswap /dev/sda3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Formatting &lt;strong&gt;sda3&lt;/strong&gt; as swap partition&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;swapon /dev/sda3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mounting:&lt;/strong&gt;   &lt;/p&gt;

&lt;p&gt;After all Creating partition and formatting, now we can mount those partitions. Be aware of mounting partition we should creating a directories first.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;mount /dev/sda4 /mnt/gentoo/
mkdir /mnt/gentoo/boot
mount /dev/sda2 /mnt/gentoo/boot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Installing Stage3:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We cloud use &lt;strong&gt;links&lt;/strong&gt; to download a stage tarball by surf to the gentoo mirror list. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;links https://www.gentoo.org/downloads/mirrors&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Chosing a proper(close by) mirror and enter the &lt;strong&gt;releases/amd64/autobuilds/current-stage3-amd64/&lt;/strong&gt; directory.&lt;/p&gt;

&lt;p&gt;Chose &lt;strong&gt;stage3-amd64-&amp;lt;releases&amp;gt;.tar.bz2&lt;/strong&gt;/&lt;strong&gt;stage3-amd64-&amp;lt;releases&amp;gt;.tar.bz2.DIGESTS&lt;/strong&gt;/&lt;strong&gt;stage3-amd64-&amp;lt;releases&amp;gt;.tar.bz2.DIGESTS.asc&lt;/strong&gt; to download&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;.CONTENTS file that contains a list of all files inside the stage tarball   &lt;/p&gt;

  &lt;p&gt;.DIGESTS file that contains checksums of the stage file, in different algorithms   &lt;/p&gt;

  &lt;p&gt;.DIGESTS.asc file that, like the .DIGESTS file, contains checksums of the stage file in different algorithms, but is also cryptographically signed to ensure it is provided by the Gentoo project&lt;/p&gt;

  &lt;p&gt;—— from Gentoo Handbook&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Validate Checksum：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;cat stage3-amd64-&lt;span class=&quot;nt&quot;&gt;&amp;lt;releases&amp;gt;&lt;/span&gt;.tar.bz2.DIGESTS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;openssl dgst -r -sha512 stage3-amd64-&lt;span class=&quot;nt&quot;&gt;&amp;lt;releases&amp;gt;&lt;/span&gt;.tar.bz2
openssl dgst -r -whirlpool stage3-amd64-&lt;span class=&quot;nt&quot;&gt;&amp;lt;release&amp;gt;&lt;/span&gt;.tar.bz2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compare the output of these commands with the value registered in the .DIGESTS(.asc) files. The values need to match, otherwise the downloaded file might be corrupt (or the digests file is).   &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0xBB572E0E2D182910
#From https://www.gentoo.org/downloads/signatures/
gpg --verify stage3-amd64-&lt;span class=&quot;nt&quot;&gt;&amp;lt;release&amp;gt;&lt;/span&gt;.tar.bz2.DIGESTS.asc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using gpg to make sure the checksums have not been tampered with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unpacking the stage tarball&lt;/strong&gt;   &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;tar xvjpf stage3-&lt;span class=&quot;nt&quot;&gt;&amp;lt;release&amp;gt;&lt;/span&gt;.tar.bz2 --xattrs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Configuring compile options&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;vi /mnt/gentoo/etc/portage/make.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;CFLAGS=&amp;quot;-march=native -O2 -pipe&amp;quot;
MAKEOPTS=&amp;quot;-j8&amp;quot; #Depends on your Processor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;CFLAGS and CXXFLAGS&lt;/strong&gt;   &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The CFLAGS and CXXFLAGS variables define the optimization flags for the GCC C and C++ compiler respectively. Although those are defined generally here, for maximum performance one would need to optimize these flags for each program separately. The reason for this is because every program is different. However, this is not manageable, hence the definition of these flags in the make.conf file.&lt;/p&gt;

  &lt;p&gt;In make.conf one should define the optimization flags that will make the system the most responsive generally. Don’t place experimental settings in this variable; too much optimization can make programs behave bad (crash, or even worse, malfunction).&lt;/p&gt;

  &lt;p&gt;—— from Gentoo Handbook   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Chosing proper mirror&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;mirrorselect -i -o &amp;gt;&amp;gt; /mnt/gentoo/etc/portage/make.conf
mkdir /mnt/gentoo/etc/portage/repos.conf
cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf
vi /mnt/gentoo/etc/portage/repos.conf/gentoo.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;cat gentoo.conf&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;[gentoo]
location = /usr/portage
sync-type = rsync
sync-uri = rsync://rsync.gentoo.org/gentoo-portage
auto-sync = yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Copy Nameserver info:&lt;/strong&gt;    &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;cp -L /etc/resolv.conf /mnt/gentoo/etc/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mounting the necessary filesystems&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;mount -t proc proc /mnt/gentoo/proc
mount --rbind /sys /mnt/gentoo/sys
mount --make-rslave /mnt/gentoo/sys
mount --rbind /dev /mnt/gentoo/dev
mount --make-rslave /mnt/gentoo/dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Entering the chroot environment&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;chroot /mnt/gentoo /bin/bash
source /etc/profile
export PS1=&amp;quot;(chroot) $PS1&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge-webrsync&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(chroot) livecd / # eselect profile list
Available profile symlink targets:
  [1]   default/linux/amd64/13.0 *
  [2]   default/linux/amd64/13.0/selinux
  [3]   default/linux/amd64/13.0/desktop
  [4]   default/linux/amd64/13.0/desktop/gnome
  [5]   default/linux/amd64/13.0/desktop/gnome/systemd
  [6]   default/linux/amd64/13.0/desktop/kde
  [7]   default/linux/amd64/13.0/desktop/kde/systemd
  [8]   default/linux/amd64/13.0/desktop/plasma
  [9]   default/linux/amd64/13.0/desktop/plasma/systemd
  [10]  default/linux/amd64/13.0/developer
  [11]  default/linux/amd64/13.0/no-multilib
  [12]  default/linux/amd64/13.0/systemd
  [13]  default/linux/amd64/13.0/x32
  [14]  hardened/linux/amd64
  [15]  hardened/linux/amd64/selinux
  [16]  hardened/linux/amd64/no-multilib
  [17]  hardened/linux/amd64/no-multilib/selinux
  [18]  hardened/linux/amd64/x32
  [19]  hardened/linux/musl/amd64
  [20]  hardened/linux/musl/amd64/x32
  [21]  default/linux/uclibc/amd64
  [22]  hardened/linux/uclibc/amd64
(chroot) livecd / # eselect profile set 12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Configuring Timezone&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;echo &amp;quot;Asia/Shanghai&amp;quot; &amp;gt; /etc/timezone
emerge --config sys-libs/timezone-data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Install gcc-5.3&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -av =gcc-5.3.0

The following keyword changes are necessary to proceed:
 (see &amp;quot;package.accept_keywords&amp;quot; in the portage(5) man page for more details)
# required by =gcc-5.3.0 (argument)
=sys-devel/gcc-5.3.0 ~amd64

Would you like to add these changes to your config files? [Yes/No]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Update Configuration file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;dispatch-conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;--- /tmp/tmpjosdvwsz/0  2016-03-29 05:44:01.780036771 +0000
+++ /etc/portage/._cfg0000_package.accept_keywords      2016-03-29
05:43:15.840036346 +0000
@@ -1 +1,2 @@
-/dev/null
+# required by =gcc-5.3.0 (argument)
+=sys-devel/gcc-5.3.0 ~amd64

&amp;gt;&amp;gt; (1 of 1) -- /etc/portage/package.accept_keywords
&amp;gt;&amp;gt; q quit, h help, n next, e edit-new, z zap-new, u use-new
   m merge, t toggle-merge, l look-merge:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run again&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -av =gcc-5.3.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Change GCC default version&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(chroot) livecd / # gcc-config -l
 [1] x86_64-pc-linux-gnu-4.9.3 *
 [2] x86_64-pc-linux-gnu-5.3.0
(chroot) livecd / # gcc-config 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Install Kernel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Download kernel source&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -av sys-kernel/gentoo-sources&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Checking Kernel Version&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(chroot) livecd linux # eselect kernel list
Available kernel symlink targets:
  [1]   linux-4.1.15-gentoo-r1 *&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configuring Kernel Options&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;cd /usr/src/linux
make menuconfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enable KASan&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;[*] KASan: runtime memory debugger 
    Instrumentation type (Inline instrumentation)  ---&amp;gt;
        ( ) Outline instrumentation
        (X) Inline instrumentation #This options required GCC 5.0+

&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;*&amp;gt;   Intel ESB, ICH, PIIX3, PIIX4 PATA/SATA support 

[*]   Fusion MPT logging facility
       &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;*&amp;gt;   Fusion MPT ScsiHost drivers for SPI  
       &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;*&amp;gt;   Fusion MPT ScsiHost drivers for SAS  
       (128) Maximum number of scatter gather entries (16 - 128)
       &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;*&amp;gt;   Fusion MPT misc device (ioctl) driver  
       [*]   Fusion MPT logging facility&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compiling kernel&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;make -j9 &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make modules_install &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Generating initramfs&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -av genkernel
genkernel initramfs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install Firmware&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge --ask sys-kernel/linux-firmware&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Configure fstab&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;# NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
/dev/sda2               /boot           ext2            noauto,noatime  0 2
/dev/sda4               /               ext4            noatime         0 1
/dev/sda3               none            swap            sw              0 0
/dev/cdrom              /mnt/cdrom      auto            noauto,ro       0 0
/dev/fd0                /mnt/floppy     auto            noauto          0 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Configure Network:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge net-misc/netifrc dhcp dhcpd

vim /etc/conf.d/net
###
config_eth0=&amp;quot;dhcp&amp;quot;
###&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Automatically start networking at boot&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;cd /etc/init.d
ln -s net.lo net.eth0
rc-update add net.eth0 default&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update SYSTEM&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -avuDN @world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Setting root password&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;passwd root&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Install BOOTLOADER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this section, I going to use GRUB2 as my bootloader&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -av grub
grub2-install /dev/sda
vim /etc/default/grub
######################add line show as below.
GRUB_CMDLINE_LINUX=&amp;quot;rootfstype=ext4 init=/usr/lib/systemd/systemd&amp;quot;
######################
grub2-mkconfig -o /boot/grub/grub.cfg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Exiting chroot environment&lt;/strong&gt; &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;exit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;reboot&quot;&gt;reboot&lt;/h1&gt;

&lt;p&gt;After reboot, we could simply use dhcp automatically connect to Internet&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;dhclient&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Adding address sanitizer FLAGS into &lt;strong&gt;/etc/portage/make.conf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;CFLAGS=&amp;quot;-march=native  -O2 -pipe -fsanitize=address&amp;quot;
CXXFLAGS=&amp;quot;-march=native  -O2 -pipe -fsanitize=address&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;HINT:Address sanitizer and kernel address sanitizer are incompatible with thread sanitizer. If you want to use thread sanitizer, you can build another system to enble -fsanitize=thread separately.&lt;/p&gt;

&lt;p&gt;Clear global variable to avoid &lt;strong&gt;configure&lt;/strong&gt; error&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;export LIBS=
export CFLAGS=
export CXXFLAGS=&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;rebuild whole system (exclude gcc and glibc)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -e world --exclude=gcc --exclude=glibc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 01 Apr 2016 19:35:05 +0800</pubDate>
        <link>http://www.hardenedlinux.org/system-security/2016/04/01/A-T-KA-Sanitized-GNU-Linux-a-new-way-of-bug-hunter-in-FLOSS-Community.html</link>
        <guid isPermaLink="true">http://www.hardenedlinux.org/system-security/2016/04/01/A-T-KA-Sanitized-GNU-Linux-a-new-way-of-bug-hunter-in-FLOSS-Community.html</guid>
        
        
        <category>system-security</category>
        
      </item>
    
      <item>
        <title>(A/T/KT) - Sanitized GNU/Linux: a new way of bug hunter in FLOSS Community</title>
        <description>&lt;p&gt;by citypw and an anonymous dude &lt;/p&gt;

&lt;p&gt;“As long as there is technology, there will be hackers. As long as there are hackers, there will be PHRACK magazine.” — The Circle of Lost Hackers on Phrack issue 64&lt;/p&gt;

&lt;p&gt;As long as there are bugs, there will be vulnerablities. As long as there are vulnerablities, there will be regular/stable/weaponized exploits. Bug hunting is one of most important issues that we’ve been fighting for decades in FLOSS community. Addr/thread sanitizers are very powerful weapons for bug hunters to build their own &lt;a href=&quot;http://nullcon.net/website/archives/ppt/goa-15/analyzing-chrome-crash-reports-at-scale-by-abhishek-arya.pdf&quot;&gt;Fuzzing platform&lt;/a&gt; or can be integrated into the regression testing. In either ways, FLOSS community can get benefit from it;-)&lt;/p&gt;

&lt;p&gt;We are inspired by the &lt;a href=&quot;https://fosdem.org/2016/schedule/event/csafecode/&quot;&gt;work of Hanno Böck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of Gentoo installation STEPS in this article are &lt;strong&gt;COPY&lt;/strong&gt;   from &lt;a href=&quot;https://wiki.gentoo.org/wiki/Handbook:AMD64&quot;&gt;Gentoo Handbook&lt;/a&gt;[1]&lt;/p&gt;

&lt;p&gt;Use links show as below to download gentoo LiveCD: &lt;br /&gt;
Current-install-iso: &lt;br /&gt;
&lt;a href=&quot;http://distfiles.gentoo.org/releases/amd64/autobuilds/current-install-amd64-minimal/&quot;&gt;http://distfiles.gentoo.org/releases/amd64/autobuilds/current-install-amd64-minimal&lt;/a&gt; &lt;br /&gt;
After booing into liveCD, we can start to prepare for install system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the partitions(GPT)：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;parted -a optimal /dev/sda&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Use parted to configure &lt;em&gt;sda&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted)mklabel gpt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Setting the GPT label&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted)unit mib
(parted)mkpart primary 1 3
(parted)name 1 grub
(parted)set 1 bios_grub on&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating a partition start from 1MB and end at 3MB used by GRUB2BOOTLOADER&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted) mkpart primary 3 131
(parted) name 2 boot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating BOOT partition (128MB)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted) mkpart primary 131 1024
(parted) name 3 swap&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating swap partition&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted) mkpart primary 1024 -1
(parted) name 4 rootfs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Creating remaining disk as ROOTFS&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(parted) set 2 boot on
(parted) quit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Creating the partitions(MBR):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;livecd ~ # fdisk -t dos /dev/sda

Welcome to fdisk (util-linux 2.26.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.


Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-104857599, default 2048): 2048
Last sector, +sectors or +size{K,M,G,T,P} (2048-104857599, default 104857599):
+2M

Created a new partition 1 of type &amp;#39;Linux&amp;#39; and of size 2 MiB.

Command (m for help): n
Partition type
   p   primary (1 primary, 0 extended, 3 free)
   e   extended (container for logical partitions)
Select (default p): p
Partition number (2-4, default 2): 2
First sector (6144-104857599, default 6144): 
Last sector, +sectors or +size{K,M,G,T,P} (6144-104857599, default 104857599):
+128M

Created a new partition 2 of type &amp;#39;Linux&amp;#39; and of size 128 MiB.

Command (m for help): p
Disk /dev/sda: 50 GiB, 53687091200 bytes, 104857600 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xcc7ca523

Device     Boot Start    End Sectors  Size Id Type
/dev/sda1        2048   6143    4096    2M 83 Linux
/dev/sda2        6144 268287  262144  128M 83 Linux

Command (m for help): a
Partition number (1,2, default 2): 2

The bootable flag on partition 2 is enabled now.

Command (m for help): p
Disk /dev/sda: 50 GiB, 53687091200 bytes, 104857600 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xcc7ca523

Device     Boot Start    End Sectors  Size Id Type
/dev/sda1        2048   6143    4096    2M 83 Linux
/dev/sda2  *     6144 268287  262144  128M 83 Linux

Command (m for help): n
Partition type
   p   primary (2 primary, 0 extended, 2 free)
   e   extended (container for logical partitions)
Select (default p): p
Partition number (3,4, default 3): 
First sector (268288-104857599, default 268288):       
Last sector, +sectors or +size{K,M,G,T,P} (268288-104857599, default
104857599): +1024M

Created a new partition 3 of type &amp;#39;Linux&amp;#39; and of size 1 GiB.

Command (m for help): t
Partition number (1-3, default 3):3
Partition type (type L to list all types):82

Command (m for help): n
Partition type
   p   primary (3 primary, 0 extended, 1 free)
   e   extended (container for logical partitions)
Select (default e): p

Changed type of partition &amp;#39;Linux&amp;#39; to &amp;#39;Linux swap / Solaris&amp;#39;.

Selected partition 4
First sector (2365440-104857599, default 2365440): 
Last sector, +sectors or +size{K,M,G,T,P} (2365440-104857599, default
104857599): 

Created a new partition 4 of type &amp;#39;Linux&amp;#39; and of size 48.9 GiB.

Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Creating file systems：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;mkfs.ext2 /dev/sda2
mkfs.ext4 /dev/sda4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Formatting &lt;strong&gt;sda2&lt;/strong&gt; and &lt;strong&gt;sda4&lt;/strong&gt; in ext2 and ext4&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;mkswap /dev/sda3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Formatting &lt;strong&gt;sda3&lt;/strong&gt; as swap partition&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;swapon /dev/sda3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mounting:&lt;/strong&gt;   &lt;/p&gt;

&lt;p&gt;After all Creating partition and formatting, now we can mount those partitions. Be aware of mounting partition we should creating a directories first.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;mount /dev/sda4 /mnt/gentoo/
mkdir /mnt/gentoo/boot
mount /dev/sda2 /mnt/gentoo/boot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Installing Stage3:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We cloud use &lt;strong&gt;links&lt;/strong&gt; to download a stage tarball by surf to the gentoo mirror list. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;links https://www.gentoo.org/downloads/mirrors&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Chosing a proper(close by) mirror and enter the &lt;strong&gt;releases/amd64/autobuilds/current-stage3-amd64/&lt;/strong&gt; directory.&lt;/p&gt;

&lt;p&gt;Chose &lt;strong&gt;stage3-amd64-&amp;lt;releases&amp;gt;.tar.bz2&lt;/strong&gt;/&lt;strong&gt;stage3-amd64-&amp;lt;releases&amp;gt;.tar.bz2.DIGESTS&lt;/strong&gt;/&lt;strong&gt;stage3-amd64-&amp;lt;releases&amp;gt;.tar.bz2.DIGESTS.asc&lt;/strong&gt; to download&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;.CONTENTS file that contains a list of all files inside the stage tarball   &lt;/p&gt;

  &lt;p&gt;.DIGESTS file that contains checksums of the stage file, in different algorithms   &lt;/p&gt;

  &lt;p&gt;.DIGESTS.asc file that, like the .DIGESTS file, contains checksums of the stage file in different algorithms, but is also cryptographically signed to ensure it is provided by the Gentoo project&lt;/p&gt;

  &lt;p&gt;—— from Gentoo Handbook&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Validate Checksum：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;cat stage3-amd64-&lt;span class=&quot;nt&quot;&gt;&amp;lt;releases&amp;gt;&lt;/span&gt;.tar.bz2.DIGESTS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;openssl dgst -r -sha512 stage3-amd64-&lt;span class=&quot;nt&quot;&gt;&amp;lt;releases&amp;gt;&lt;/span&gt;.tar.bz2
openssl dgst -r -whirlpool stage3-amd64-&lt;span class=&quot;nt&quot;&gt;&amp;lt;release&amp;gt;&lt;/span&gt;.tar.bz2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compare the output of these commands with the value registered in the .DIGESTS(.asc) files. The values need to match, otherwise the downloaded file might be corrupt (or the digests file is).   &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0xBB572E0E2D182910
#From https://www.gentoo.org/downloads/signatures/
gpg --verify stage3-amd64-&lt;span class=&quot;nt&quot;&gt;&amp;lt;release&amp;gt;&lt;/span&gt;.tar.bz2.DIGESTS.asc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using gpg to make sure the checksums have not been tampered with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unpacking the stage tarball&lt;/strong&gt;   &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;tar xvjpf stage3-&lt;span class=&quot;nt&quot;&gt;&amp;lt;release&amp;gt;&lt;/span&gt;.tar.bz2 --xattrs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Configuring compile options&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;vi /mnt/gentoo/etc/portage/make.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;CFLAGS=&amp;quot;-march=native -O2 -pipe&amp;quot;
MAKEOPTS=&amp;quot;-j8&amp;quot; #Depends on your Processor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;CFLAGS and CXXFLAGS&lt;/strong&gt;   &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The CFLAGS and CXXFLAGS variables define the optimization flags for the GCC C and C++ compiler respectively. Although those are defined generally here, for maximum performance one would need to optimize these flags for each program separately. The reason for this is because every program is different. However, this is not manageable, hence the definition of these flags in the make.conf file.&lt;/p&gt;

  &lt;p&gt;In make.conf one should define the optimization flags that will make the system the most responsive generally. Don’t place experimental settings in this variable; too much optimization can make programs behave bad (crash, or even worse, malfunction).&lt;/p&gt;

  &lt;p&gt;—— from Gentoo Handbook   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Chosing proper mirror&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;mirrorselect -i -o &amp;gt;&amp;gt; /mnt/gentoo/etc/portage/make.conf
mkdir /mnt/gentoo/etc/portage/repos.conf
cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf
vi /mnt/gentoo/etc/portage/repos.conf/gentoo.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;cat gentoo.conf&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;[gentoo]
location = /usr/portage
sync-type = rsync
sync-uri = rsync://rsync.gentoo.org/gentoo-portage
auto-sync = yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Copy Nameserver info:&lt;/strong&gt;    &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;cp -L /etc/resolv.conf /mnt/gentoo/etc/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mounting the necessary filesystems&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;mount -t proc proc /mnt/gentoo/proc
mount --rbind /sys /mnt/gentoo/sys
mount --make-rslave /mnt/gentoo/sys
mount --rbind /dev /mnt/gentoo/dev
mount --make-rslave /mnt/gentoo/dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Entering the chroot environment&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;chroot /mnt/gentoo /bin/bash
source /etc/profile
export PS1=&amp;quot;(chroot) $PS1&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge-webrsync&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(chroot) livecd / # eselect profile list
Available profile symlink targets:
  [1]   default/linux/amd64/13.0 *
  [2]   default/linux/amd64/13.0/selinux
  [3]   default/linux/amd64/13.0/desktop
  [4]   default/linux/amd64/13.0/desktop/gnome
  [5]   default/linux/amd64/13.0/desktop/gnome/systemd
  [6]   default/linux/amd64/13.0/desktop/kde
  [7]   default/linux/amd64/13.0/desktop/kde/systemd
  [8]   default/linux/amd64/13.0/desktop/plasma
  [9]   default/linux/amd64/13.0/desktop/plasma/systemd
  [10]  default/linux/amd64/13.0/developer
  [11]  default/linux/amd64/13.0/no-multilib
  [12]  default/linux/amd64/13.0/systemd
  [13]  default/linux/amd64/13.0/x32
  [14]  hardened/linux/amd64
  [15]  hardened/linux/amd64/selinux
  [16]  hardened/linux/amd64/no-multilib
  [17]  hardened/linux/amd64/no-multilib/selinux
  [18]  hardened/linux/amd64/x32
  [19]  hardened/linux/musl/amd64
  [20]  hardened/linux/musl/amd64/x32
  [21]  default/linux/uclibc/amd64
  [22]  hardened/linux/uclibc/amd64
(chroot) livecd / # eselect profile set 12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Configuring Timezone&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;echo &amp;quot;Asia/Shanghai&amp;quot; &amp;gt; /etc/timezone
emerge --config sys-libs/timezone-data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Install gcc-5.3&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -av =gcc-5.3.0

The following keyword changes are necessary to proceed:
 (see &amp;quot;package.accept_keywords&amp;quot; in the portage(5) man page for more details)
# required by =gcc-5.3.0 (argument)
=sys-devel/gcc-5.3.0 ~amd64

Would you like to add these changes to your config files? [Yes/No]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Update Configuration file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;dispatch-conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;--- /tmp/tmpjosdvwsz/0  2016-03-29 05:44:01.780036771 +0000
+++ /etc/portage/._cfg0000_package.accept_keywords      2016-03-29
05:43:15.840036346 +0000
@@ -1 +1,2 @@
-/dev/null
+# required by =gcc-5.3.0 (argument)
+=sys-devel/gcc-5.3.0 ~amd64

&amp;gt;&amp;gt; (1 of 1) -- /etc/portage/package.accept_keywords
&amp;gt;&amp;gt; q quit, h help, n next, e edit-new, z zap-new, u use-new
   m merge, t toggle-merge, l look-merge:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run again&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -av =gcc-5.3.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Change GCC default version&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(chroot) livecd / # gcc-config -l
 [1] x86_64-pc-linux-gnu-4.9.3 *
 [2] x86_64-pc-linux-gnu-5.3.0
(chroot) livecd / # gcc-config 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Install Kernel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Download kernel source&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -av sys-kernel/gentoo-sources&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Checking Kernel Version&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;(chroot) livecd linux # eselect kernel list
Available kernel symlink targets:
  [1]   linux-4.1.15-gentoo-r1 *&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configuring Kernel Options&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;cd /usr/src/linux
make menuconfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enable KASan&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;[*] KASan: runtime memory debugger 
    Instrumentation type (Inline instrumentation)  ---&amp;gt;
        ( ) Outline instrumentation
        (X) Inline instrumentation #This options required GCC 5.0+

&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;*&amp;gt;   Intel ESB, ICH, PIIX3, PIIX4 PATA/SATA support 

[*]   Fusion MPT logging facility
       &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;*&amp;gt;   Fusion MPT ScsiHost drivers for SPI  
       &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;*&amp;gt;   Fusion MPT ScsiHost drivers for SAS  
       (128) Maximum number of scatter gather entries (16 - 128)
       &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;*&amp;gt;   Fusion MPT misc device (ioctl) driver  
       [*]   Fusion MPT logging facility&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compiling kernel&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;make -j9 &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make modules_install &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Generating initramfs&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -av genkernel
genkernel initramfs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install Firmware&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge --ask sys-kernel/linux-firmware&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Configure fstab&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;# NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
/dev/sda2               /boot           ext2            noauto,noatime  0 2
/dev/sda4               /               ext4            noatime         0 1
/dev/sda3               none            swap            sw              0 0
/dev/cdrom              /mnt/cdrom      auto            noauto,ro       0 0
/dev/fd0                /mnt/floppy     auto            noauto          0 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Configure Network:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge net-misc/netifrc dhcp dhcpd

vim /etc/conf.d/net
###
config_eth0=&amp;quot;dhcp&amp;quot;
###&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Automatically start networking at boot&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;cd /etc/init.d
ln -s net.lo net.eth0
rc-update add net.eth0 default&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update SYSTEM&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -avuDN @world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Setting root password&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;passwd root&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Install BOOTLOADER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this section, I going to use GRUB2 as my bootloader&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -av grub
grub2-install /dev/sda
vim /etc/default/grub
######################add line show as below.
GRUB_CMDLINE_LINUX=&amp;quot;rootfstype=ext4 init=/usr/lib/systemd/systemd&amp;quot;
######################
grub2-mkconfig -o /boot/grub/grub.cfg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Exiting chroot environment&lt;/strong&gt; &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;exit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;reboot&quot;&gt;reboot&lt;/h1&gt;

&lt;p&gt;After reboot, we could simply use dhcp automatically connect to Internet&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;dhclient&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Adding address sanitizer FLAGS into &lt;strong&gt;/etc/portage/make.conf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;CFLAGS=&amp;quot;-march=native  -O2 -pipe -fsanitize=address&amp;quot;
CXXFLAGS=&amp;quot;-march=native  -O2 -pipe -fsanitize=address&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;HINT:Address sanitizer and kernel address sanitizer are incompatible with thread sanitizer. If you want to use thread sanitizer, you can build another system to enable -fsanitize=thread separately.&lt;/p&gt;

&lt;p&gt;Clear global variable to avoid &lt;strong&gt;configure&lt;/strong&gt; error&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;export LIBS=
export CFLAGS=
export CXXFLAGS=&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;rebuild whole system (exclude gcc and glibc)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;emerge -e world --exclude=gcc --exclude=glibc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 01 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://www.hardenedlinux.org/system-security/2016/04/01/x_Sanitized-GNU-Linux-a-new-way-of-bug-hunter-in-FLOSS-Community.html</link>
        <guid isPermaLink="true">http://www.hardenedlinux.org/system-security/2016/04/01/x_Sanitized-GNU-Linux-a-new-way-of-bug-hunter-in-FLOSS-Community.html</guid>
        
        
        <category>system-security</category>
        
      </item>
    
      <item>
        <title>How to build Clang toolchains for Android</title>
        <description>&lt;p&gt;by zet&lt;/p&gt;

&lt;h1 id=&quot;build-the-clang-toolchains-for-android&quot;&gt;Build the Clang Toolchains for Android&lt;/h1&gt;

&lt;p&gt;The following process is used to build the Clang that is used by both the
Android platfrom and the NDK. And this process is done in the AOSP tree.&lt;/p&gt;

&lt;p&gt;Both GNU/Linux and Windows toolchains are built on GNU/Linux machines. Windows host
binaries are built with mingw.&lt;/p&gt;

&lt;p&gt;My developing environment is &lt;strong&gt;Linux Mint 17.3&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;source-versions-in-aosp&quot;&gt;Source versions in AOSP&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Create the work directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;bash
  mkdir working_directory
  TOOLCHAINS_BUILD_TOP=work_direcory # optional, only for clear description
									                   # below
  export TOOLCHAINS_BUILD_TOP
  cd work_directory				           # build will be done in this directory
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are two versions Clang/LLVM code tree in AOSP, the first is:
aosp/platform/external/(clang|llvm), and the second is:
aosp/toolchain/(clang|llvm). &lt;/p&gt;

&lt;p&gt;Something most important is:&lt;/p&gt;

&lt;h4 id=&quot;personal-communication-from-stephen-hines--google&quot;&gt;Personal Communication from Stephen Hines @ google&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;the first tree is a dead-end. That was a prior forked version of Clang/LLVM
was previously used for the NDK conpiler (but not for the AOSP platform
compiler). We have since condensed down to use the same conpiler for the
NDK as is used by the platform (AOSP).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, the first tree(toolchain/clang) is a dead one. But if you are very curious
about what had the googelers done to the toolchain/(clang|llvm), you can clone
the source code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
  # ustc source is available too
  git clone https://aosp.tuna.tsinghua.edu.cn/toolchain/clang
  git clone https://aosp.tuna.tsinghua.edu.cn/toolchain/llvm
  git branch -a
  git branch release_36   # Only doing a checkout, can see the source code
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we have the source code of NDK compiler, download the Clang/LLVM-3.6
official source, and compare the two project(NDK version and official version),
you will see there is little differece between them. NDK Clang version added
some class to support new ABI(e.g. NDK64ABI) and new Target(e.g. 
Android64Target), that’s all.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;get and config the &lt;em&gt;repo&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;bash
mkdir ~/bin
PATH=~/bin:$PATH
curl https://storage.googleapis.com/git-repo-downloads/repo &amp;gt; ~/bin/repo
chmod a+x ~/bin/repo
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;checkout the &lt;code&gt;clang&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;We have three source repository that repo can get the source code in The
following section, The last one is google official source had fucked by GFW.
Only execute &lt;strong&gt;one&lt;/strong&gt; of the three repo init below.&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;bash
repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b llvm
repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b llvm
repo init -u https://android.googlesource.com/platform/manifest -b llvm  
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;bash
repo sync  # get the toolchain source
&lt;/code&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Some description about repo&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;The souce code of toolchain should be get by repo, repo is designed for
manage the complex dependencies of sub-project of AOSP, implementated by a
set of Python scripts. repo wraps some git plumbing, and according to a 
config file locate at $TOOLCHAINS_BUILD_TOP/.repo/manifests/default.xml to
deal with the dependency and repository locations of sub-project of every
topic(which is a set of git branchs). $TOOLCHAINS_BUILD_TOP/.repo/manifests
is a local git respository contains versions of config file. According to
this, we have a new way get topic(for example, after we get clang/llvm,
we want gcc now). &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;code&gt;bash
  cd $TOOLCHAINS_BUILD_TOP/.repo/manifests
  git branch -a 	  # list of all the topic,
                              # e,g. : remotes/origin/gcc, the topic of gcc
  git checkout gcc  # the config file : default.xml is for gcc NOW
  repo sync			    # get the gcc source
&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;Follow the analysis, we may get a successfull compiled Clang/LLVM topic
according to the config file(default.xml), but there is another magic
piece: the relationship of every sub-project in local of a successfull
Clang/LLVM topic is &lt;strong&gt;not&lt;/strong&gt; identical with the repository of same name of
AOSP. So, recommending for repo.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;additional java dependencies&lt;/p&gt;

    &lt;p&gt;There is request about java environment in line 200+ at
$TOOLCHAINS_BUILD_TOP/build/core/main.mk : at least OpenJDK1.8.&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;bash
sudo add-apt-repository ppa:openjdk-r/ppa # add PPA
sudo apt-get update 
sudo apt-get install openjdk-8-jdk
sudo update-alternatives --config java    # config the default java
sudo update-alternatives --config javac   # config the default javac
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;generating&quot;&gt;generating&lt;/h2&gt;

&lt;p&gt;Run this build script, there is a two stage build. and the second stage will
  use the binary generated by the first stage. in other word, the last deliver
  binary is generated by itself.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
  python external/clang/build.py
 &lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;check&quot;&gt;check&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;bash
  cd $TOP_SOURCE/external/llvm
  ./android_test.sh
 &lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://www.hardenedlinux.org/toolchains/2016/04/01/How_to_build_Clang_toolchains_for_Android.html</link>
        <guid isPermaLink="true">http://www.hardenedlinux.org/toolchains/2016/04/01/How_to_build_Clang_toolchains_for_Android.html</guid>
        
        
        <category>toolchains</category>
        
      </item>
    
      <item>
        <title>MPROTECT早期设计文档</title>
        <description>&lt;p&gt;&lt;strong&gt;原文：&lt;a href=&quot;https://pax.grsecurity.net/docs/mprotect.txt&quot;&gt;mprotect 早期设计文档&lt;/a&gt; 2003.11.04&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作者：The PaX team&lt;/p&gt;

&lt;p&gt;译者：wnereiz&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1. 设计&lt;/h3&gt;

&lt;p&gt;MPROTECT 的目标是防止在任务的地址空间引入新的可执行代码。通过限制 
mmap() 和 mprotect() 界面可以达到此目的。&lt;/p&gt;

&lt;p&gt;这种限制可以防止
- 创建可执行的匿名映射
- 创建可执行/可写文件映射
- 使可执行/只读文件映射变得可写 —— 在有 ET_DYN 的 ELF 文件上进行再
  定位（非 PIC 类共享库）的情况除外
- 使不可执行映射变得可执行&lt;/p&gt;

&lt;p&gt;为了理解这种限制，我们将映射的可写性/可执行性看作是状态信息。此状
态信息保存在 vm_flags 区域的 vma 结构体中，此信息决定了给定区域
（即被其覆盖的每一页）在当前是否处于可写/可执行状态，且/或可以（通
过在此区域上使用 mprotect()）变成可写/可执行的。描述各属性的标志分
别为：VM_WRITE, VM_EXEC, VM_MAYWRITE 和 VM_MAYEXEC。&lt;/p&gt;

&lt;p&gt;这四个属性意味着任何映射 (vma) 可以具有16种不同的状态（为了便于讨论，
我们在这里忽略其他的属性），而我们可以通过限制 vms 在整个生命周期内
可处于或可更改为何种状态来达到我们的目的。&lt;/p&gt;

&lt;p&gt;处于下列任何一种(“良好的”)状态下，则无法向一个映射引入新的可执行代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VM_WRITE
VM_MAYWRITE
VM_WRITE | VM_MAYWRITE
VM_EXEC
VM_MAYEXEC
VM_EXEC | VM_MAYEXEC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;处于任何其他状态下，都有可能在映射中直接写入新的可执行代码，或者映射
可以被 mprotect() 更改为可写/可执行状态。&lt;/p&gt;

&lt;p&gt;请注意，默认的内核行为已经可以阻止某些特定的状态了（当一个映射分别
不存在 VM_MAYWRITE 和 VM_MAYEXEC 时，是不允许分别具有 VM_WRITE 和
VM_EXEC 的），所以只留给了我们4种良好状态：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VM_MAYWRITE
VM_MAYEXEC
VM_WRITE | VM_MAYWRITE
VM_EXEC | VM_MAYEXEC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们来看一下内核可以创建何种映射，而 MPROTECT 都更改了些什么：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;匿名映射（栈、受 brk() 和 mmap() 控制的堆）：这些会创建为 VM_WRITE | 
VM_EXEC | VM_MAYWRITE | VM_MAYEXEC 状态，这并不是良好的状态。因为
这些映射必须是可写的，所以我们只能更改可执行状态（而这在实际中仍然
会损坏应用程序，后面会提到针对这一点的解决方法），MPROTECT 会直接将
他们的状态更改为 VM_WRITE | VM_MAYWRITE，&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;共享的内存映射：这些映射会被创建为 VM_WRITE&lt;/td&gt;
          &lt;td&gt;VM_MAYWRITE 的良好状态。&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;文件映射：类似于匿名映射，文件映射可以被创建成所有的“不良”状态（为了
简明起见，暂不列出），尤其是内核会将 VM_MAYWRITE | VM_MAYEXEC 赋给
任何映射，而不管其对权限是否有请求。为了尽可能减少应用程序的损坏，同
时还要达到我们的目的，我们决定在文件映射方面使用如下状态： &lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;VM_WRITE | VM_MAYWRITE 或 VM_MAYWRITE —— 如果 PROT_WRITE 在 mmap()
的时候被请求。&lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;VM_EXEC&lt;/td&gt;
              &lt;td&gt;VM_MAYEXEC —— 如果 PROT_WRITE 没有被请求。&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有效的可执行映射被强制转换为不可写，而可写映射被强制转换为非可执行
（同时不允许在其生存周期内修改此状态）。对此有一个特例，在有一种情况
下这些修改前的状态是有实际需求的，那就是应该允许动态连接器在 non-PIC
类 ELF 文件的可执行段上进行再定位操作。&lt;/p&gt;

&lt;p&gt;通过以上这些限制，向任务的地址空间引入可执行代码的方法只剩下一个，那
就是在请求 PROT_EXEC 的同时将文件映射到内存上。对于攻击者而言，这意味
着他在能够向攻击任务地址空间 mmap() 之前，不得不在目标系统上创建/写一个
文件。有很多方法用来防止/探测到这类攻击，但这已经超出了 PaX 项目的范畴。&lt;/p&gt;

&lt;p&gt;就像我们之前提到的，MPROTECT 的限制会损坏已有依赖不良 vma 状态的程序。
大多数情况下指的是被用来满足更高层内存分配需求（像是 C 中的 malloc()
家族）以及被假定为可执行（java，gcc trampoline，等等）的非可执行匿名
映射。为了让这些程序在 MPROTECT 下工作，使用的方法是扩充 mmap() 界面
并且允许将 VM_MAY* 置于特定状态。下面的例子演示了程序是如何使用此方法
的：&lt;/p&gt;
&lt;pre&gt;
- mmap(..., PROT_READ | PROT_WRITE | PROT_MAYREAD | PROT_MAYEXEC, ...)
- 在以上区域生成代码
- mprotect(..., PROT_READ | PROT_EXEC)
&lt;/pre&gt;

&lt;p&gt;注意，初始 mmap() 调用从来不会请求和允许 PROT_EXEC ，因此程序的设计者
必须显式调用 mprotect()，这样就可以避免意外地违反 MPROTECT 规则。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2. 实现&lt;/h3&gt;

&lt;p&gt;前两种限制方式在 mm/mmap.c 的 do_mmap_pgoff() 和 do_brk() 中实现，而
其他两种方式在 mm/mprotect.c 的 sys_mprotect() 中（non-PIC ELF 库由 
pax_handle_maywrite() 处理）。&lt;/p&gt;

&lt;p&gt;由于只有在强制使用非可执行页的时候 MPROCTECT 才有意义，所以针对给定
任务，只有在 PAGEEXEC 或 SEGMEXEC 其中之一启用的情况下，此限制才会被
启用。此外，对于强制使用非可执行页来说，某些限制是有意义或是必须的。
因此即便是没有启用 MPROTECT，这些限制也会被使用（但启用 MPROTECT 对于
实现此特性是必须的）。&lt;/p&gt;

&lt;p&gt;允许 non-PIC ELF 再定位的这种特殊行为是由 mm/mprotect.c 中的 
pax_handle_maywrite() 管理的。逻辑上很明确，首先我们要确认任务所请求
的 PROT_WRITE 映射中哪些是再定位的候选映射（必须是可执行文件映射，而且
还没有被改为可写），然后我们确保映射的原始文件是 ET_DYN ELF 文件，此
文件的动态表中有一个条目说明了文本再定位的需求。如果没有问题，我们就
直接更改映射中包含其余 do_mprotect() 逻辑的状态，使其允许此请求，而且
我们还要设置 VM_MAYNOTWRITE 标志，这样就可以禁止针对此映射产生更多的 
PROT_WRITE 请求。&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://www.hardenedlinux.org/system-security/2016/03/14/mprotect.html</link>
        <guid isPermaLink="true">http://www.hardenedlinux.org/system-security/2016/03/14/mprotect.html</guid>
        
        
        <category>system-security</category>
        
      </item>
    
      <item>
        <title>PaX 早期设计文档概述</title>
        <description>&lt;p&gt;&lt;strong&gt;原文：&lt;a href=&quot;https://pax.grsecurity.net/docs/pax.txt&quot;&gt;PaX 早期设计文档概述&lt;/a&gt; 2003.11.29&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作者：The PaX team&lt;/p&gt;

&lt;p&gt;译者：wnereiz&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1. 设计&lt;/h3&gt;

&lt;p&gt;PaX 项目的目标是研究各种针对软件开发缺陷的防御机制，这些缺陷可以让攻击者针对被攻击任务所在的地址空间行任意读/写。这类缺陷还包括其他各种形式的（基于栈或堆的）缓冲区溢出漏洞、用户提供的格式化字符串漏洞，等等。&lt;/p&gt;

&lt;p&gt;我们要做的并不是发现和修复这些漏洞，而是要防范和抑制漏洞利用技术，认识到这点非常重要。基于此目的，这些技术可以从三个层次影响被攻击任务：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(1) 添加/执行任意代码&lt;/li&gt;
  &lt;li&gt;(2) 执行现有代码，但是打破了程序原本的执行顺序&lt;/li&gt;
  &lt;li&gt;(3) 按照程序原本的顺序执行现有代码，但是加载任意的数据&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例如广为人知的 shellcode 注入技术属于 (1)，被称为 return-to-libc 类型的技术则属于 (2)。&lt;/p&gt;

&lt;p&gt;将代码引入到任务的地址空间可以通过两种方式来实现——创建可执行映射或更改已有的可写/可执行映射。第一种方式可以通过控制映射到任务权限来防范，然而这已经超出了 PaX 项目的范畴，处理这种情况的最佳方法是使用存取控制系统。第二种方式可以通过完全拒绝创建可写/可执行映射来防范。然而这种解决方案会损坏确实需要执行此类映射的应用程序，除非重写这些程序以便其能够更加谨慎地处理这类映射。这是我们能做到的最优方法。这种方案的详细说明将在单独的文档 NOEXEC 中描述。&lt;/p&gt;

&lt;p&gt;执行上述（由攻击者引入或已经存在于任务地址空间中的）代码，需要用已有的代码修改执行流程。这类修改发生在代码解引用函数指针的时候。如果指针存储在可写内存段中，攻击者便可以进行干预。虽然看上去不把指针放在可写内存段中的主意不错，但问题是这不太可能（例如，需要保存栈的过程调用的返回地址），所以要用不同的方法解决此问题。由于这类修改需要在用户态中进行，而 PaX 到目前为止是一个面向于 kernel 的项目，所以这些方法将会在未来实现，详细信息请参考单独的文档。&lt;/p&gt;

&lt;p&gt;PaX 带来的下一类新特性是它引进了一种多样化的形式：地址空间布局随机化(ASLR)。其思想为，基于观察，在实际中大多数攻击行为都要获取被攻击任务的不同的地址。如果我们能够在每次创建任务的时候在这些地址中引入熵，那么这会迫使攻击者进行猜测或暴力查询，从而反过来使得攻击的尝试产生非常大的“噪音“，因为任何失败的尝试都可能会导致目标崩溃。这样便可以很容易地观察到这类事件的发生，并采取行动。这种解决方法的详细信息在单独的文档中有描述。&lt;/p&gt;

&lt;p&gt;在分析上述技术之前，我们要注意一个经常被忽视或误解的组合防御机制的属性。有些人喜欢关注系统的独立片段，并依据它得出关于整体有效性的结论（或者更糟，解除某机制，原因是如果不引入另一个机制，它将变得无效。或者是相反的情况）。在我们的案例中，这种方法会导致错误的理解。我们考虑，如果有这样一个防御机制用来防御 (1) 和 (2)，例如此机制利用了 NOEXEC 和 PaX 中对未来用户态的更改。若仅仅引入了 NOEXEC，有人会说这是没有意义的，因为方法 (2) 仍然可以被利用（在实践中这点经常会成为解除非可执行栈方式的理由，然而这种方式并不能与 NOEXEC 混为一谈）。如果仅仅作为 (2) 的防御措施，有人同样会说既然攻击者可以直接利用(1)，那么我们为什么还要去关心它，从而得出结论说所有这些防御机制都是无效的。根据以上提示，这将得出错误的结论，部署两种防御机制将会同时保护(1)和(2)——当一个防线失效之后，另一个防线将会起到保护作用（例如 NOEXEC 仅可以使用 return-to-libc 类型的攻击进行突破，反之亦然）。&lt;/p&gt;

&lt;p&gt;下面，我们将假设 NOEXEC （非可执行页特性和 mmap/mprotect 限制）和全 ASLR（使用 ET_DYN 可执行性）在系统中同时启用。此外，我们的系统中还需要有 PIC ELF 库，以及崩溃探测和反应系统，这样将可以在一定（低）数量的崩溃之后阻止攻击程序的执行。这样一个系统可能存在的攻击点描述如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果攻击者不需要预先知道被攻击任务的地址，则攻击方式 (3) 具有 100% 的可靠性。&lt;/li&gt;
  &lt;li&gt;如果攻击者需要预先知道地址，而且可以通过被攻击任务的地址空间获取（例如，目标存在信息泄漏的 bug），则攻击方式 (2) 和 (3) 具有 100% 的可靠性。&lt;/li&gt;
  &lt;li&gt;如果攻击者需要预先知道地址，但不通过猜测或暴力搜索的手段便无法获取，则攻击方式 (2) 和 (3) 具有低可能性（“低“可以进一步进行量化，见 ASLR 文档）。&lt;/li&gt;
  &lt;li&gt;如果攻击者可以操纵被攻击任务创建、写入和映射一个文件，则攻击方式 (1) 是可行的。这反过来需要使用攻击方式 (2)，所以对它的分析同样适用于此处（注意，虽然并非 PaX 的内容，但是建议在实际产品的系统中部署存取控制系统，这样可以防止此类攻击点）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于以上几点，毫无疑问 PaX 未来的开发方向将会是防范方式 (2) 或至少降低其有效性，并排除或减少方式 (3) 的可利用途径的数量。（当然这也有助于对其他的方式进行反击） &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2. 实现&lt;/h3&gt;

&lt;p&gt;主线开发是在 IA-32 (i386) 架构的 Linux 2.4 上，然而大多数特性也已经提供了对 alpha, ia64, parisc, ppc, sparc, sparc64 和 x86_64 的支持 ，而且其他架构在可获得硬件的情况下也将得到支持（感谢 grsecurity 和 Hardened Gentoo 项目）。基于此原因，所有关于实现的文档都特指 i386 平台（通用的设计思想适用于所有架构）。&lt;/p&gt;

&lt;p&gt;非可执行页的特性已支持 alpha, i386, ia64, parisc, ppc, sparc, sparc64 和 x86_64，而 ppc64 可以与 pcc 共享同样的实现。mips 和 mips64 架构总的来说没有希望得到支持，因为它们具有统一的 TLB （此型号有一个分支将被 PaX 所支持）。关于非可执行页以及相关特性的文档是 NOEXEC，两个针对 i386 的特定方法在 &lt;a href=&quot;http://hardenedlinux.org/system-security/2015/05/25/pageexec-old.html&quot;&gt;PAGEEXEC&lt;/a&gt; 和 &lt;a href=&quot;http://hardenedlinux.org/system-security/2015/05/26/segmexec.html&quot;&gt;SEGMEXEC&lt;/a&gt; 中有描述。&lt;/p&gt;

&lt;p&gt;mmap/mprotect 的限制主要是独立于架构的，只有处理特殊情况时需要针对架构采用特定的代码（许多代码片段需要在可写但非可执行的内存中执行，例如一些架构上的栈或 PLT)。此内容的主文档是 MPROTECT，而 EMUTRAMP 和 EMUSIGRT 则描述了针对 i386 特定的模拟技术。&lt;/p&gt;

&lt;p&gt;ASLR 同样是独立于架构的，只有一种特例，那就是不同地址的可随机化位在不同架构中是有区别的。其文档按照随机化区域拆分，所以 RANDKSTACK 和 RANDUSTACK 分别描述了 kernerl 和用户栈的特性。 RANDMMAP 和 RANDEXEC 的内容分别是关于随机化区域用于 ELF 库和可执行性的。实现 SEGMEXEC 和 RANDEXEC 的基础结构是 vma mirroring，在文档 VMMIRROR 中描述。&lt;/p&gt;

&lt;p&gt;由于一些应用程序需要执行 PaX 所禁止的行为（实时生成代码）或需要做出 PaX 环境下不再正确的假设 （例如，在地址空间中固定了或至少预先描述出此地址），我们提供了一个工具叫做 “chpax”，它可以帮助终端用户针对各种 PaX 特性基于其可执性进行细致的控制。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Shawn注：目前(2016年3月）Hardenedlinux社区推荐使用paxctl-ng（而不是chpax和paxctl）来给二进制可执行程序打PaX flags，paxctl-ng是属于elfix项目的一个工具，在很长一段时间里都elfix都只有Gentoo才有人打包，而paxctl-ng支持XT_PAX的特性在安全运维中很多人都会使用到，目前Hardenedlinux社区有一名maintainer做&lt;a href=&quot;https://github.com/hardenedlinux/elfix-deb/tree/master/debian&quot;&gt;elfix for Debian packaging&lt;/a&gt;的工作。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 09 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://www.hardenedlinux.org/system-security/2016/03/09/pax.html</link>
        <guid isPermaLink="true">http://www.hardenedlinux.org/system-security/2016/03/09/pax.html</guid>
        
        
        <category>system-security</category>
        
      </item>
    
      <item>
        <title>CCC(混沌通讯会议)：一场很德国的黑客大会</title>
        <description>&lt;p&gt;原文地址：&lt;a href=&quot;http://motherboard.vice.com/read/chaos-communication-congress-a-very-german-hacking-conference&quot;&gt;Chaos Communication Congress: A Very German Hacking Conference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;译者：lifematrix[&lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#115;&amp;#116;&amp;#101;&amp;#118;&amp;#101;&amp;#110;&amp;#108;&amp;#105;&amp;#117;&amp;#099;&amp;#120;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#115;&amp;#116;&amp;#101;&amp;#118;&amp;#101;&amp;#110;&amp;#108;&amp;#105;&amp;#117;&amp;#099;&amp;#120;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;哑剧艺术家懒洋洋地躺在铺着地毯的楼梯上，几百张桌子，上面凌乱地堆满笔记本电脑，延伸到不同的几个大厅。一个穿得整整齐齐的人，脸朝下趴在一间侧屋的床垫上，昨晚一整夜疯狂地敲击键盘，已让他心力憔悴。&lt;/p&gt;

&lt;p&gt;德国各地几十个混沌计算机俱乐部分会(&lt;a href=&quot;https://www.ccc.de/de/club/erfas&quot;&gt;Chaos Computer Club (CCC) chapters&lt;/a&gt;)的成员，以及来自世界各地的与会者，屈尊到汉堡，喝着黑客汽水(&lt;em&gt;译注：&lt;a href=&quot;https://motherboard.vice.com/blog/how-a-german-soda-became-hackers-fuel-of-choice&quot;&gt;club-mate&lt;/a&gt;, 含马黛的苏打饮料，称为&lt;a href=&quot;http://www.douban.com/subject/24871269/&quot;&gt;黑客汽水&lt;/a&gt;&lt;/em&gt;)，进行为期四天的hacking、辩论和演讲。&lt;/p&gt;

&lt;p&gt;这就是混沌通讯会议，CCC的年度艺术、政治和安全大会，由一千多强大的志愿者大军操办。&lt;/p&gt;

&lt;center&gt;***&lt;/center&gt;

&lt;p&gt;“没人从中赚到一分钱”，大会前，Linus Neumann - CCC的一位发言人在柏林的一家咖啡馆告诉我。无论是录制发言的人，还是那些确保传媒未经本人允许不可将镜头对准其人的向导，还是经过训练能响应紧急事件的应急人员，或者负责衣帽间并在人们进入会场时检查他们腕带的伙计们，都没拿报酬。而且他们经常自己买票参加活动，以作支持。&lt;/p&gt;

&lt;p&gt;Tim Privlove, CCC的一位资深成员，早期会议的组织者，不认为这只是为之工作而不拿报酬。&lt;/p&gt;

&lt;p&gt;“这实际上不是为了免费。我实际上认为，你不能这么来看它：因为它不是工作，” 在最近的大会上他一边喝着咖啡一边说。“这是他们的活动：他们拥有它。这根植到他们的DNA，如果没有它，他们难以活下去。”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-03-02-cccavghc/CCC-hallway.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;CCC hallway. Photo: Joseph Cox&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;多年来，要部分感谢这一志愿者面向，让CCC已设法筹集到可观数目的资金。&lt;/p&gt;

&lt;p&gt;“我不是要说，我们特别有钱了，而是说从财务的角度，我们舒心了，” Neemann说。“我们能承受彻底搞砸整个事情的财务风险，不会破产。”&lt;/p&gt;

&lt;p&gt;“这钱就在那儿，因为每个人都发挥自己的作用：因为每个人都做志愿者工作，” 他说。&lt;/p&gt;

&lt;p&gt;志愿者的想法，实际上是将大会区别于其它黑客会议的地方。而且，这是全盘多方面的策略。&lt;/p&gt;

&lt;p&gt;在大会自己仓库风格的夜店里，DJ, 艺术家，黑客，技术者，积极分子和其他人，聚会一起去分享和讨论他们时代的话题，直到深夜。&lt;/p&gt;

&lt;p&gt;“很多人第一次走进来时，他们很惊讶地看到，这里比他们所想的，更为包容，更为广义，” Pritlove说。&lt;/p&gt;

&lt;p&gt;但是，有些人在混沌通讯大会里不特别受欢迎。&lt;/p&gt;

&lt;p&gt;“一个供职于德国军方的人参加了CCC，大概不想告诉任何人，他们可能不愿出现在台面上，” Neumann说。&lt;/p&gt;

&lt;p&gt;在黑帽，美国的一个主要黑客大会上，国家安全局长Keith Alexander发表了&lt;a href=&quot;https://www.youtube.com/watch?v=4Sg4AtcW0LU&quot;&gt;2013年的主题演讲&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这显然，从来不会发生在混沌通讯大会上。&lt;/p&gt;

&lt;p&gt;“当我离开时，会有这一天，” CCC的主席，他叫“dodger”，告诉我。“我们尽可能避开那些为情报机构或类似事情工作的人。”&lt;/p&gt;

&lt;p&gt;但是，当对待前军方或情报机构雇员时，灰色地带出现了。如果CCC发布一个总名单反对邀请供职于那些领域的人，“那么我们就不会有任何揭弊者，”比如爱德华·斯诺登，dodger说。&lt;/p&gt;

&lt;p&gt;“这很难办。”&lt;/p&gt;

&lt;p&gt;反军方的心态可以追溯到大会的历史，一个政治事件导致它的创立。&lt;/p&gt;

&lt;center&gt;***&lt;/center&gt;

&lt;p&gt;1981年，&lt;a href=&quot;https://en.wikipedia.org/wiki/Wau_Holland&quot;&gt;一个黑客和无线电爱好者&lt;/a&gt;，名为Wau Hollan，以及一小群有相似想法的人，聚集在左翼报纸&lt;em&gt;Die Tageszeitung&lt;/em&gt;的办公室，讨论数据、计算机，以及这些可能给大众带来的影响。&lt;/p&gt;

&lt;p&gt;“Wau Holland是对社会有远见的人，” Neumann说。甚至远在80年代早期，当大部分人还没有电脑时，互联网还也没有出现，Holland和其他人就看到了这些网络的未来，如此令人兴奋、也令人担忧。&lt;/p&gt;

&lt;p&gt;三年后，1984年，CCC宣布了第一次混动通讯大会，一个在汉堡定期举办的聚会。“大会的第一次呈现，规模相当小，大概200人，” Pritlove说。&lt;/p&gt;

&lt;p&gt;尽管规模不大不小，但是84年的大会包含了所有与今天大会涉及的相同内容。Workshop, 演讲，以及一群人连续几天一直在笔记本电脑上hacking。&lt;/p&gt;

&lt;p&gt;“相同的话题，相同的态度，相同的人，” Pritlove说。&lt;/p&gt;

&lt;p&gt;CCC随之创建了一个“eingetragener Verein (e. V.)” (&lt;em&gt;译注: &lt;a href=&quot;https://en.wikipedia.org/wiki/Eingetragener_Verein&quot;&gt;e. V.&lt;/a&gt;是在德国和奥地利合法的志愿者社团，有法人身份&lt;/em&gt;)，实质上是一个合法组织，允许团体有财务权。&lt;/p&gt;

&lt;p&gt;有个正式的实体也给团队一些合法性，当开展工作时受法律保护：事实上，hacking到银行系统或者电信网络，会很容易被执法机关解释为犯罪或不法活动。以一个e.V.运作，降低了受到任何干涉的风险。&lt;/p&gt;

&lt;p&gt;“这只是随后被采纳的一个法律解释，为了不被视为恐怖组织，” Pritlove开玩笑说。“这是替代方法。”&lt;/p&gt;

&lt;p&gt;在大会开始的同年，Wau Holland和另一个CCC成员Steffan Wernery，搞了一次’抢银行’。他们利用Bildschirmtext (BTX)的缺陷，这是由&lt;a href=&quot;https://en.wikipedia.org/wiki/Deutsche_Bundespost&quot;&gt;德国联邦邮政&lt;/a&gt;和电话网络运营的计算机网络，掐掉13万5千德国马克(大概7万5千美元)，存到CCC拥有的银行账户上。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;我认为德国是尊重黑客的安全岛&lt;/h2&gt;

&lt;p&gt;起初在网络背后的政府机构&lt;a href=&quot;http://www.spiegel.de/einestages/btx-hack-1984-angriff-der-ccc-hacker-gegen-die-bundespost-a-1002443.html&quot;&gt;忽略了提出的问题&lt;/a&gt;。因此CCC将hack的细节分享给德国最大的一家广播公司，在媒体一番炒作之后，问题被修复了。最后CCC将现金返还。&lt;/p&gt;

&lt;p&gt;“从一开始[CCC]就在做媒体博弈，” Pritlove补充说，“黑客在德国的印象立即成了罗宾汉之类的侠盗。”&lt;/p&gt;

&lt;p&gt;其它高姿态的hack也为这一形象做出贡献。为了反对在护照中使用生物计量数据，&lt;a href=&quot;http://www.wired.com/2008/03/hackers-publish/&quot;&gt;小组发布了德国当时内政部长Wolfgang Schauble的指纹&lt;/a&gt;；与荷兰一个公民组织一起, CCC揭露了德国使用计算机之后&lt;a href=&quot;http://www.ccc.de/en/updates/2007/wahlcomputer-spenden&quot;&gt;电子投票系统的缺陷&lt;/a&gt;；2011年，小组逆向工程了&lt;a href=&quot;http://www.wired.co.uk/news/archive/2011-10/12/german-state-spying-software&quot;&gt;国家执法部门所用的强大恶意软件的片段&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;然后就在最近，作为对84年BTX hack的响应，德国新闻组Tagesschau报道了研究者的发现，欧洲支付终端被&lt;a href=&quot;https://motherboard.vice.com/read/european-card-terminals-are-plagued-with-serious-vulnerabilities&quot;&gt;严重的缺陷所困恼&lt;/a&gt;。这些缺陷让入侵者得以将资金转到德国境内任意一个银行账户。&lt;/p&gt;

&lt;p&gt;“因此在德国，黑客的形象与世界其它地方特别是美国，完全不同。在美国，黑客普遍与犯罪活动联系起来，” Pritlove说。CCC经常被要求到&lt;a href=&quot;https://www.youtube.com/watch?v=Q4Z5Y8SLvic&quot;&gt;一些政府听证会&lt;/a&gt;作证，提供监管、IT立法和数据保留方面的专家证据，而不是象美国媒体经常报道黑客的那样，被看做一小撮计算机犯罪分子。&lt;/p&gt;

&lt;p&gt;“我认为德国是黑客受到尊敬的安全岛”, dodger，CCC主席说。&lt;/p&gt;

&lt;p&gt;但也曾有一些时刻，德国的hacking场面和俱乐部，本可能全部被摧毁。&lt;/p&gt;

&lt;center&gt;***&lt;/center&gt;

&lt;p&gt;一个与CCC有联系的黑客小组，由Karl Koch这个人领导，由于侵入美国计算机并&lt;a href=&quot;https://en.wikipedia.org/wiki/Karl_Koch_(hacker)&quot;&gt;将操作系统源代码卖给了当时苏联情报组织-克格勃(KGB)&lt;/a&gt;而被捕。1989年，发现Koch被烧死在策勒附近的森林里，离他出生的汉诺威城不远。&lt;/p&gt;

&lt;p&gt;整个事件“威胁到要终结CCC，” Neumann说 - 严重损害他们所代表的黑客形象。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-03-02-cccavghc/CCC-hackerspace.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;CCC hackerspace. Photo: Joseph Cox&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;Pritlove解释说，大会在汉堡和柏林之间迁移了数次。1989年柏林墙倒塌，让首都成为一个”疯狂”的地方，聚会当时在柏林举办，Pritlove说，”在那儿，每个社会的小组织都莫名其妙地足够壮大而能维持。“&lt;/p&gt;

&lt;p&gt;然后到了90年代后期，大会发展巨快，大概超过以往任何时候。Pritlove说，“终于hacking成为很酷的事情，每个年轻人都有自己的电脑。”&lt;/p&gt;

&lt;p&gt;“万维网(world wide web)，赛博空间，每件事都完全让人兴奋，” 他补充到，“千禧年来临，未来终将在这里！”&lt;/p&gt;

&lt;p&gt;在整个过程中，一个持续不断的政治脉络贯穿着CCC和大会的发展。从左翼报纸Die Tageszeitung的办公室，到柏林和汉堡的反资本主义占屋，直到今天一个&lt;a href=&quot;http://www.theguardian.com/technology/2015/dec/29/hamburg-chaos-hacker-conference-refugee-keynote&quot;&gt;索马里难民在大会主讲台发表主题演讲&lt;/a&gt;，政治在塑造俱乐部及其行动中扮演了至关重要的角色。&lt;/p&gt;

&lt;p&gt;其它的政治对话，包括年度国家&lt;a href=&quot;https://events.ccc.de/congress/2015/Fahrplan/events/7307.html&quot;&gt;洋葱会话&lt;/a&gt;，对去年Tor匿名网络的概述，以及&lt;a href=&quot;https://events.ccc.de/congress/2015/Fahrplan/events/7374.html&quot;&gt;讨论监管系统对我们城市的影响&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;“我们在80年代告诉他们的，如今正在发生，” dogger说。&lt;/p&gt;

&lt;p&gt;“就大会和政治，你不能将它们分开”， Pritlove说。这三人都同意，CCC的政治血统追溯起来要比其创立早得多：有人将它基本上看作后二战反应，Pritlove也提到，涌现于70年代&lt;a href=&quot;https://en.wikipedia.org/wiki/Red_Army_Faction&quot;&gt;激进左翼的政治运动&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;解决方法办法是“我们不需要阻止它。我们需要找到不同的途径，我们通过进入权力机构来开始征途。我们需要具有建设性。我们需要走入那些我们所批判的决策中，而非仅仅置身事外，然后一直扔燃烧弹，并杀人。”&lt;/p&gt;

&lt;p&gt;进入权力机构的做法已经受到欢迎。2015年11月，德国内政部长&lt;a href=&quot;http://www.faz.net/aktuell/wirtschaft/netzwirtschaft/it-gipfel-ich-braeuchte-von-ihnen-mal-eine-krisennummer-13921103.html&quot;&gt;公开声明&lt;/a&gt;，如果一个大规模的互联网相关或赛博事件发生，他将会求助于CCC。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;“如今整个活动就是一个操作系统”&lt;/h2&gt;

&lt;p&gt;在00后中期以前，大会很大程度上是与世隔绝的事件。虽然它也吸引德国各地及欧洲的黑客，但在这之外的黑客们大部分并不关注。&lt;/p&gt;

&lt;p&gt;因此，Pritlove告诉我，CCC开始接触到在美国的联系人，邀请他们来发表演讲。&lt;/p&gt;

&lt;p&gt;“他们回去后，告诉其朋友们所有关于大会的情况。下一年，有20个人来，再下一年，有更多的人来，” Pritlove说。&lt;/p&gt;

&lt;p&gt;美国人显然很吃惊。“在美国的黑客大会，到处是警察，商人，情报机构，充满了怀疑，” Pritlove继续说，“很多都是为了赚钱。”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-03-02-cccavghc/3D-printers.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;3D printers. Photo: Joseph Cox&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;但是，CCC的大会，“是完全的自由，[美国人]还处在乔治·布什时代(&lt;em&gt;译注：911事件的时期&lt;/em&gt;)，对黑客充满了害怕、恐怖和压制。”&lt;/p&gt;

&lt;p&gt;“两周后他们都回去了，他们在旧金山、华盛顿、纽约建立了黑客空间。一年后，美国各地都诞生了新的黑客空间”， Pritlove说。“我想，可以公平地说，&lt;a href=&quot;http://www.wired.com/2007/08/us-hackers-moun/&quot;&gt;点燃这些的火种&lt;/a&gt;确实来自这里，来自这里的场景。”&lt;/p&gt;

&lt;p&gt;军方与德国hacking场面的距离，在这里极不同于在美国那样密切。&lt;/p&gt;

&lt;p&gt;“基本上，在美国任何IT安全领域的人，迟早都会成为国防部的某类承包商或者进入这一领域，否则不可能走太远。” Neumann说。“因为那里有资金，有趣的工作，你能做出好玩的东西。”&lt;/p&gt;

&lt;p&gt;他也指出Roger Dingledine，Tor项目的联合创始人和研究总监，&lt;a href=&quot;http://www.scrible.com/contentview/page/MKQ81904HKLO822Q14O5K2R8CGA42GA6:77893486/index.html?utm_source=tb_permalink&amp;amp;utm_medium=permalink&amp;amp;utm_campaign=tb_buttons&amp;amp;_sti=1423988&quot;&gt;他为好几份军方资助的合同工作&lt;/a&gt;。(Tor项目如今试图让&lt;a href=&quot;http://www.theverge.com/2015/11/24/9793232/tor-project-donate-crowdfund&quot;&gt;资金多元化&lt;/a&gt;，特别是减少对美国政府资金的依赖。)&lt;/p&gt;

&lt;p&gt;在德国，相反，却没有这样的合同商、军工联合体，或任何与美国类似程度的情况。&lt;/p&gt;

&lt;p&gt;这里没有“那么多钱，以及那么多军方的国家荣誉。” Neumann说。因此，在德国绽放的黑客很可能迈向其它方向：CCC，而非美国那样的路径。“我们有大多数的研究者”，Neumann补充说。&lt;/p&gt;

&lt;center&gt;***&lt;/center&gt;

&lt;p&gt;今年，大会接待了&lt;a href=&quot;https://en.wikipedia.org/wiki/Chaos_Communication_Congress&quot;&gt;超过一万三千名参会者&lt;/a&gt;，已经变成由各种自制网络和基础设施组成了盘旋复杂的奇妙装置。&lt;/p&gt;

&lt;p&gt;当参会者鱼贯进入会场时，扫描入场券以及付款台的计算机都其自己的软件。专门有个后勤系统用于在酒吧里管理黑客汽水瓶子的库存，并将空瓶子拿走。“丝绸之路”送递系统-由管道组成了网络在大楼各个房间里迂回穿行 -允许黑客在大会各个中心之间传送物件。&lt;/p&gt;

&lt;p&gt;多通路、高带宽的上行链路给参会者提供了极其快速的网络连接；一个全功能的GSM移动电话网络允许每个人摆弄到深夜时能够联系上他们的朋友。&lt;/p&gt;

&lt;p&gt;甚至视频摄制组，他们负责录制、实况直播以及用高清格式归档谈话，也使用他们自己的相机、装备，间或软件。&lt;/p&gt;

&lt;p&gt;“我要说，这甚至超过了专业标准，因为你实在买不到这样的服务,” Pritlove说。“如今整个活动就是个操作系统。”&lt;/p&gt;

&lt;p&gt;开源的属性自然反映在与会者自己对设备的选择上: 在“基础设施回顾”中，负责大会基干设施的小组做了&lt;a href=&quot;https://www.youtube.com/watch?v=NwX-ylkxDOY&quot;&gt;一小时的展示&lt;/a&gt;，发言者宣布，Linux是迄今最受欢迎的操作系统族群，大会里大约四分之一的计算机都使用了Liunx。(“这是Linux胜利的时刻，”演讲者说，听众们接着就欢呼鼓掌。)&lt;/p&gt;

&lt;p&gt;“的确有些公司可能举办这样的活动，” 在基础设施回顾中一位发言者说，他投放了一张有各种组织的幻灯片。今年，那些公司包括中国公司华为，德国电信(德国最大的互联网服务提供商)，其它就这十几个。&lt;/p&gt;

&lt;p&gt;“我们遇到一点点问题；你不可能运作一个这样的会议而不需要从大公司借东西,” dodger说。“你需要获得硬件。你不能购买那些硬件，并持有它们；这不可能。”事实上，在这样规模的大会，要提供几千人的互通互联，大概没人拥有这些的硬件和基础设施来实现它，因此确实需要赞助者介入。&lt;/p&gt;

&lt;p&gt;但这并不需象其它大会那样，通过提供装备，巨头公司们开始将他们的商标贴满了交易所，希望获得一些新客户。&lt;/p&gt;

&lt;p&gt;“我们试图寻找合作伙伴借给我们硬件，我们也试图不要只有一个主赞助商。我们不允许在大会上打横幅或做广告，” dodger告诉我。相反，反法西斯和支持难民的旗帜淹没了会议大厅。“硬件赞助商将他们的Logo放在CCC网站上，没有Google索引等等。这就是他们的所得。”&lt;/p&gt;

&lt;p&gt;CCC与大型机构的联系，通常是因为有个成员为其中之一工作，Neumann说。&lt;/p&gt;

&lt;p&gt;“当然我们有人在NXP供职,” 他对我说，提到一个大型的&lt;a href=&quot;http://www.nxp.com/applications/smart-connected-solutions:SMART-CONNECTED-SOLUTIONS&quot;&gt;计算机网络公司&lt;/a&gt;。“如果我们想与NXP安全分部的负责人交谈，我有他的号码，我直接给他打电话。” 这些关系已经在过去30年里发展起来了，也是人们通常职业生活的一部分。“&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-03-02-cccavghc/pinball.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;Pinball. Photo: Joseph Cox&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;但是，大会真正的脊梁不是数字化的基础设施或计算机硬件，而是无偿在会议中工作的志愿大军。&lt;/p&gt;

&lt;p&gt;“你需要大约1000人来照顾所有杂七杂八的事，” Neumann告诉我。&lt;/p&gt;

&lt;p&gt;大部分这样的志愿者，被称为天使：是让系统甚至在密集的使用下，稳定运行四天的个人。(第一天刚到大会的20分钟里，一位天使要我把一些外套衣架从一个房间挪到另一个。自然地，我施以援手，尽管只微薄之力)。&lt;/p&gt;

&lt;p&gt;志愿者文化是大会如此亲密地嫁接到德国的众多原因之一。但是，它也与一个国家独特的历史和政治传统相关联。&lt;/p&gt;

&lt;p&gt;Neumann说象大会这样的事物，也许能在德国之外存在，但可能有困难：让一千多人齐心协力连续数天或数周工作，所需的后勤挑战，想象在其它地方并非易事。&lt;/p&gt;

&lt;p&gt;当问到Pritlove大会是否能存在德国之外时，他一声长叹。&lt;/p&gt;

&lt;p&gt;“这是很德国的事”，他说。“我不知道。”&lt;/p&gt;

&lt;p&gt;Topics: hacking, Chaos Communication Congress, CCC, germany, black hat, politics, white hat, Club Mate, volunteerism, features&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://www.hardenedlinux.org/translation/2016/03/02/chaos-communication-congress-a-very-german-hacking-conference.html</link>
        <guid isPermaLink="true">http://www.hardenedlinux.org/translation/2016/03/02/chaos-communication-congress-a-very-german-hacking-conference.html</guid>
        
        
        <category>translation</category>
        
      </item>
    
      <item>
        <title>黑客与英雄们：CCC和黑客空间的崛起</title>
        <description>&lt;p&gt;原文地址：&lt;a href=&quot;http://hackaday.com/2016/01/12/hackers-and-heroes-rise-of-ccc-and-hackerspaces/&quot;&gt;Hackers and Heroes: Rise of the CCC and Hackerspaces&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;译者：Tom Li&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/german-america.jpg&quot; alt=&quot;german-america&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从电话飞客的根源，到对黑客活动的镇压以及法律案例，使得黑客开始转入地下活动（或者下海经商）。美国的黑客文化在过去的三十年中已经得到了很多关注。关注度最高的大概是 L0pht，一个九十年代显著的黑客空间，他们参与漏洞的公开披露，并且有争议地被认为是美国最后一个有公众影响力的黑客组织。&lt;/p&gt;

&lt;p&gt;美国黑客的细节已经&lt;a href=&quot;http://hardenedlinux.org/translation/2016/02/12/Hackers-and-heroes-a-tale-of-two-countries.html&quot;&gt;在我昨天的文章中&lt;/a&gt;详细讲述了，并以一段后记结束。L0pht已经绝尘而去，而且据我所知，此后没有其他组织将社会责任和公众影响力相匹配了，这对黑客来说简直是耻辱 —— 现在的美国，许多黑客相关问题正在表决，但很大程度上并没有听取我们的想法。&lt;/p&gt;

&lt;h2 id=&quot;ccc&quot;&gt;混沌计算机俱乐部（CCC）&lt;/h2&gt;

&lt;p&gt;但先让我们把目光从美国转向德国。在八十年代早期，德国像美国一样，有许多本地计算机俱乐部，充其量也就是每个月吃顿饭，有一个科技馆或者（对于 CCC 来说）一个新闻办公室。早期计算机爱好者无偿地交换知识和软件，至少在美国，比起找地方聚会以外，并没有什么正式安排：时间已经定好了，还能有啥？&lt;/p&gt;

&lt;p&gt;德国精神则有些不同，你可以在同伙中找到“Vereinsmentalität”，一种“俱乐部思想精神”。基本上，在德国能找到的任何兴趣爱好和体育运动，都有一个有组织的俱乐部可供加入。例如冬季两项运动、养蜂、水彩画或者 hacking，德国人喜欢组织起来一同做有趣的事情。&lt;/p&gt;

&lt;p&gt;因此在1981年，CCC诞生为一个非正式本地黑客俱乐部，然后开始在汉堡进行定期聚会。在1984年，他们举办了第一届混沌通讯大会 —— 一个圣诞节之后的年会，如今已经是第32年了。几年前，CCC作为一个正式组织进行了登记，但除了单纯的“Vereinsmentalität”以外，还有更多的东西。&lt;/p&gt;

&lt;p&gt;翻译自&lt;a href=&quot;http://www.ccc.de/de/club&quot;&gt;CCC网站&lt;/a&gt;：“为了消除我们法律方面的误解，CCC是一个促进信息自由，和保护人权至少是全球通讯不受阻碍的人权，而进行注册登记的 e.V（e.V, Eingetragener Verein，注册组织，德国组织的一种法律地位）。”请注意这里的关键词：“消除法律方面的误解”。可见，虽然在最初五年CCC还只是个非正式组织，但他们已经搞了些在法律上可能有大麻烦的耀眼黑客行动 —— 毫无疑问，几年之后美国也会这样的。但讽刺的是，这种先发制人的地上公开活动而不是隐藏自己，反而使他们得到了一些保护。&lt;/p&gt;

&lt;p&gt;如果你&lt;a href=&quot;http://hardenedlinux.org/translation/2016/02/12/Hackers-and-heroes-a-tale-of-two-countries.html&quot;&gt;将CCC成为注册组织的原因和政府盯上L0ph成员的Mudge的原因进行比较&lt;/a&gt;，你就会立刻理解本文的要点。公开负责的黑客组织，比起一个“黑帮”或者一个不见阳光的组织，可是冒着被指控的危险而活动的。想想看，有多少黑帮取得了非营利组织的法律资质（501c3）?同时，如果媒体记者或者国会议员有疑问，他们可以毫不费力地去找他们问问。黑客就这样成为了社团成员。&lt;/p&gt;

&lt;p&gt;CCC在这点上做得十分在行，他们偶尔推出的出版物提醒他们记住：真正将他们聚在一起的力量，“Spaß am Gerät”，玩转机器的乐趣，也就是 happy hacking。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/logo_ccc.png&quot; alt=&quot;CCC Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Kabelsalat ist gesund! 这张CCC Logo提醒你，桌子底下的一团电缆是利于健康的。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;btx-hack&quot;&gt;BTX Hack&lt;/h2&gt;

&lt;p&gt;就在CCC像其他俱乐部一样诞生时，一些早期的高调 hacks 帮忙找到了俱乐部的方向，也让作为普通人一面的他们塑造了他们的公众形象。我并不是说所有人的动机都是纯正的或者光明磊落的，但就像L0pht后来在美国一样，CCC也成为了网络新闻中关于安全漏洞的公开信息来源。CCC将这些安全漏洞一律公开，而不考虑它们会造成什么样的潜在后果。而且，如果蒙受损失的是黑客们的头号大敌 —— 德国邮政(Bundespost)，也不会损害黑客的声誉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posthorn_montage.png&quot; alt=&quot;Posthorn Montage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;左图：德国邮政Logo。右图：CCC海盗旗。看懂了吧？&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;德国邮政是一个德国黑客喜爱的目标。这家曾经的政府垄断企业，就像美国的AT&amp;amp;T一样，大都会收取高昂的费用，因为他们能够这么做。&lt;a href=&quot;http://hardenedlinux.org/translation/2016/02/12/Hackers-and-heroes-a-tale-of-two-countries.html&quot;&gt;上次的文章&lt;/a&gt;曾提到过，德国邮政禁止进口调制解调器（modem, “猫”），强迫德国人购买更贵的“官方”版本。电话费，在那个时代也就是流量费，也非常昂贵，即使是个普通人也想找到一个邮政的替代。理想主义黑客，比如CCC的创始人Wau Holland就想要个免费替代。&lt;/p&gt;

&lt;p&gt;1984年的目标是&lt;a href=&quot;https://en.wikipedia.org/wiki/Bildschirmtext&quot;&gt;Bildshirmtext&lt;/a&gt;。Bildshirmtext简称 BTX，是当时很先进的拨号连接服务，类似于美国早期的&lt;a href=&quot;https://en.wikipedia.org/wiki/CompuServe&quot;&gt;Compuserve&lt;/a&gt;。在当时被政府垄断的电话公司中，BTX仅此一家，而且相对昂贵。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/btx1.jpg&quot; alt=&quot;Bildshirmtext&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在CCC的创始人Wau Holland和Steffen Wernéry发现了一个缓冲区溢出漏洞之后，故事就开始了。这个漏洞使得他们可以截获没有加密的数据和密码，全部都是明文的。在找过德国邮政并被无视之后，他们发起了一次浩大的黑客活动，并且上了ZDF——德国第二大的全国电视台——在晚间新闻中现身。Holland 和Wernéry获取了汉堡一家银行的密码，并反复用银行的账户为CCC办理了BTX的收费业务。在挥霍了136000德国马克之后，他们去找了记者（自然，他们也把钱都还给了银行）。&lt;/p&gt;

&lt;p&gt;针对重要系统发起了&lt;a href=&quot;http://www.spiegel.de/einestages/btx-hack-1984-angriff-der-ccc-hacker-gegen-die-bundespost-a-1002443.html&quot;&gt;高调黑客活动&lt;/a&gt;&lt;a href=&quot;https://translate.google.com/translate?sl=auto&amp;amp;tl=en&amp;amp;js=y&amp;amp;prev=_t&amp;amp;hl=en&amp;amp;ie=UTF-8&amp;amp;u=http%3A%2F%2Fwww.spiegel.de%2Feinestages%2Fbtx-hack-1984-angriff-der-ccc-hacker-gegen-die-bundespost-a-1002443.html&amp;amp;edit-text=&amp;amp;act=url]&quot;&gt;（Google 翻译链接）&lt;/a&gt;，上了新闻，这改变了游戏规则。汉堡银行对他们关于潜在安全问题的提醒表示感谢，德国邮政不得不在几天内做出回应，称他们已经修复了这个缺陷。但是猫已经从袋子里放出来了，公众开始对他们的数据安全进行更多的反思。CCC则成为了拨号世界的罗宾汉。&lt;/p&gt;

&lt;p&gt;对新闻媒体的直言不讳，使得CCC在绝大多数时候位于法律和公共观点中正确的一方。例如，当媒体问及警方是否知道他们的举措时，Holland回应称，他已经将CCC的新闻通讯，&lt;a href=&quot;http://ds.ccc.de/download.html&quot;&gt;die datenschleuder&lt;/a&gt;: the “data-flinger”，寄给了巴伐尼亚警察局的计算机犯罪科。媒体将CCC以及一般意义上的黑客，作为公民社会中对那些声称数据一切安全的大企业的必要制约。&lt;/p&gt;

&lt;p&gt;通过这一具有公共影响力的高调黑客活动，促进了更多的happy hacking。CCC的成员数量迅速增长，并且在汉堡以外设立了许多卫星俱乐部。如今，CCC在德国有25个支部，超过5500名成员。毫无疑问，CCC是德国或许乃至世界最大的计算机俱乐部。而且由于他们对影响到所有人的技术，从BTX到&lt;a href=&quot;http://www.ccc.de/en/updates/2009/wahlcomputer-urteil-bverfg&quot;&gt;计算机投票系统&lt;/a&gt;进行公开试探，因此媒体和社会，有时甚至是政府都会听取他们的声音。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ccc_holland-shot0002.jpg&quot; alt=&quot;Wernéry and Holland&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wernéry和Holland以及一堆显示器，电视一频道的黄金时间。&lt;/em&gt; &lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;黑客空间，德国带给美国（以及世界）的馈赠&lt;/h2&gt;

&lt;p&gt;通过探讨CCC带给我们的东西，说来也怪，让我们重新转向了美国。不管你有没有意识到，CCC在德国的25个支部（还包括位于柏林的&lt;a href=&quot;http://c-base.org/&quot;&gt;c-base&lt;/a&gt;，维亚纳的&lt;a href=&quot;https://metalab.at/&quot;&gt;metalab&lt;/a&gt;这两个独立但友好的组织），事实上是我所说的美国黑客空间新浪潮的原型。&lt;/p&gt;

&lt;p&gt;一群美国黑客，包括Bre Pettis, Nick Farr, 和Mitch Altman，&lt;a href=&quot;http://www.wired.com/2007/08/us-hackers-moun/&quot;&gt;在2007年参与了混沌通讯夏令营&lt;/a&gt;，并游览了德国和奥地利的黑客空间，以了解他们为什么会那样，并且想要将这些思想带回美国。在2007年12月举办的第24届混沌计算机大会，关于如何运作一个黑客空间，一切对他们来说都是崭新的，因此混沌计算机俱乐部科隆和杜塞尔多夫支部的创始人Jens Ohlig 和Lars Weiler为帮助他们的美国朋友，举办了一个题目为&lt;a href=&quot;https://www.youtube.com/watch?v=8lywXCZogsg&quot;&gt;《建设黑客空间》&lt;/a&gt;的演讲。&lt;/p&gt;

&lt;p&gt;这个演讲的幻灯片&lt;a href=&quot;http://events.ccc.de/congress/2007/Fahrplan/attachments/1003_Building%20a%20Hacker%20Space.pdf&quot;&gt;《黑客空间设计模式》&lt;/a&gt;，成为这三人引领美国黑客空间新浪潮的起点。在2008年2月，营利组织&lt;a href=&quot;http://www.nycresistor.com/&quot;&gt;NYC Resistor&lt;/a&gt;开张营业，3月，非营利组织&lt;a href=&quot;http://www.hacdc.org/&quot;&gt;HacDC&lt;/a&gt;成立，开始进行非营利活动。尽管他们在这里和那里聚会有一段时间了，在2008年10月，&lt;a href=&quot;https://www.noisebridge.net/&quot;&gt;Noisebridge&lt;/a&gt;租借了一个场地，并在六个月内紧接其后，成立为一个非营利组织。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hackersonaplane2.jpg&quot; alt=&quot;Hackers On Plane&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这些年中，有成百的黑客空间在美国建立。如今，&lt;a href=&quot;https://wiki.hackerspaces.org/w/index.php?title=Special:Ask&amp;amp;offset=0&amp;amp;limit=500&amp;amp;q=[[Category%3AHackerspace]]+[[country%3A%3AUnited+States+of+America]]+[[hackerspace+status%3A%3Aactive]]&amp;amp;p=format%3Dul%2Fdefault%3D-27-27There-20is-20no-20known-20hackerspace-20in-20this-20country.-27-27&amp;amp;po=%3FCity%0A%3FState%0A%3FWebsite%0A%3FResidencies%0A&amp;amp;sort=Last+Updated&quot;&gt;在hackerspace.org上，全美国有406个登记活跃的黑客空间&lt;/a&gt;，在全世界则有超过1200 个。八年时间内的如此成果显然不差！如果你还没有参与到本地的黑客空间中，这对你来说是笔损失。&lt;/p&gt;

&lt;p&gt;因为不同成员的品味不同，每个黑客空间都稍有区别。我不知道黑客空间和创客空间的明显界限在哪里，但似乎有些组织更注重硬件项目，而其他则专注计算机和信息自由。我的个人体验是，严格的界限并不存在，而且每个空间的强项会随着时间推移而变化。&lt;/p&gt;

&lt;p&gt;这是件好事，因为当人们乐于hacking自己感兴趣的东西时，他们的生产力也最高，并且有机会为他们的工作进行异花授粉保证新鲜度。例如HacDC的早期，我们曾经有一段关于高空气球的美好时光，因为它能使我们这些搞硬件的，与业余无线电甚至是网络开发的人拼凑起来，共同参与到一个实时地图测绘的好项目上。但同时，HacDC也企划了&lt;a href=&quot;http://project-byzantium.org/&quot;&gt;拜占庭计划&lt;/a&gt;，一个易配置的临时mesh无线网络解决方案。&lt;/p&gt;

&lt;p&gt;但是，我虽然热爱美国黑客空间在过去十年中雨后春笋般的出现，以及我访问的每个黑客空间各自的特色，我不得不说美国缺失了一些东西：一个更大的组织和目的。如果400+个美国黑客空间众志成城，他们将会取得多酷的成果怎么高估都不过分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/800px-hackerspacesteedesign.jpg&quot; alt=&quot;HackerSpaces&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;usa-con&quot;&gt;USA-CON!&lt;/h2&gt;

&lt;p&gt;所以下一步怎么走？美国队？虽然让全美的400+个黑客空间都达成共识是极端困难的，但想象一下，如果能让他们能偶尔一同发出声音会有多大的好处？但如何开始？怎么才能将这个混沌组织起来？&lt;/p&gt;

&lt;p&gt;你想知道德国人是怎么做的吗？最初是一个年度大会，随后则专门成立一个组织来负责协调会议。你会被一个年度大会促成的专注和团队合作所惊讶到。一个年度活动给了团队一个最后期限去共同努力，其中的重要性我就不必说了。而且，一个年度大会给了他们物理聚会和获得乐趣的机会，而这显然是不能被轻视的。&lt;/p&gt;

&lt;p&gt;不知道你们有什么共同点？你从&lt;a href=&quot;https://en.wikipedia.org/wiki/Hacker_Ethic&quot;&gt;黑客伦理&lt;/a&gt;开始并不算个坏主意，你不妨试试。黑客伦理从MIT那些贡献计算机资源的日子产生绝非偶然，并随后成了德国CCC的基根:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对计算机的使用 —— 以及任何能让你了解到这个世界的事物 —— 应该是全面的和无限制的。总是要为势在必行的上机操作让路。&lt;/li&gt;
  &lt;li&gt;一切信息应当是自由的。&lt;/li&gt;
  &lt;li&gt;不信任权威，提倡去中心化&lt;/li&gt;
  &lt;li&gt;黑客应该以他们本身的hacking作为评价标准，而不是学位、年龄、种族或地位。&lt;/li&gt;
  &lt;li&gt;你可以用计算机创造美和艺术。&lt;/li&gt;
  &lt;li&gt;计算机能使生活变得更美好。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并至少考虑一下CCC的两点附加条件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不要对他人的数据插手&lt;/li&gt;
  &lt;li&gt;使用开放数据，保护私人数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;（本文作者Elliot是HacDC的创始成员，并且缴纳CCC慕尼黑支部会费，尽管可耻的是他在相当长一段时间里再也没去过）&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://www.hardenedlinux.org/translation/2016/02/14/Hackers-and-heroes-rise-of-the-ccc-and-hackerspaces.html</link>
        <guid isPermaLink="true">http://www.hardenedlinux.org/translation/2016/02/14/Hackers-and-heroes-rise-of-the-ccc-and-hackerspaces.html</guid>
        
        
        <category>translation</category>
        
      </item>
    
      <item>
        <title>黑客与英雄们：双国战记</title>
        <description>&lt;p&gt;原文地址 &lt;a href=&quot;http://hackaday.com/2016/01/11/hackers-and-heroes-a-tale-of-two-countries/&quot;&gt;HACKERS AND HEROES: A TALE OF TWO COUNTRIES&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;译者：n3o4po11o&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/german-america.jpg&quot; alt=&quot;german-america&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从很多方面来说，德国与美国的黑客文化都很相似，从软硬结合类型到相近的业余无线电到Blinkenlights。通过阅读Hackaday，你会发现两个国家都有类似的项目出现。在过去的10年中，两个国家都有大量黑客空间(hackerspace)出现。可能在你生活的城市中就有一两个:)。但生活在美国的黑客还缺少了一个德国黑客已经拥有的东西：尊重。&lt;/p&gt;

&lt;p&gt;在不同的圈子里提到”黑客”这个词，你永远不知道会得到什么样的回应。什么样的人才能算是”黑客”呢？是我们所提到的那些在Ashley Madison（婚外情网站）上通过账户信息来勒索的人吗？或者是从Target那里盗窃信用卡的那些人呢？还是那些花了大量的时间来破坏东西、创建东西以及拆解东西只是为了看看它们是如何工作的人？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hacker_montage.png&quot; alt=&quot;hacker-montage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于”谁是&lt;a href=&quot;http://catb.org/~esr/jargon/html/H/hacker.html&quot;&gt;黑客&lt;/a&gt;“的讨论是一个非常古老的议题，当然了是基于互联网的标准，但它的含义不止步于此。但如果你仔细回想一下最近一次在主流媒体中听到关于”黑客”这个词，但不是贬义的情况。如果在本世纪你无法回想起这样的情况，那么你生活在美国。如果你回答”就昨天，刚在国内最重要的报纸中看到”，那么你生活在德国。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;黑客在社会中的地位&lt;/h2&gt;

&lt;p&gt;激发我写这些的文章题为”&lt;a href=&quot;https://translate.google.com/translate?sl=auto&amp;amp;tl=en&amp;amp;js=y&amp;amp;prev=_t&amp;amp;hl=en&amp;amp;ie=UTF-8&amp;amp;u=http%3A%2F%2Fwww.sueddeutsche.de%2Fdigital%2Fchaos-computer-club-warum-hacker-so-wichtig-fuer-die-gesellschaft-sind-1.2798088&amp;amp;edit-text=&amp;amp;act=url&quot;&gt;为什么黑客对社会这么重要(Why Hackers are so Important for Society)&lt;/a&gt;.”我们彼此都心知肚明，因为我们将一个东西拆解以后从最底层来了解整个东西的原理：从消费电子到加密协议。但回过头来想想，如果是从美国的报纸上读到关于黑客的头条呢？   &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/800px-piratenpartei_deutschland_logo-svg.png&quot; alt=&quot;Pirate-party&quot; /&gt;&lt;/p&gt;

&lt;p&gt;德国黑客受到了很多的尊重，德国政府经常在IT安全，电子投票机，数据自由以及其他类似的领域采纳混沌计算机俱乐部&lt;a href=&quot;http://ccc.de/en&quot;&gt;(Chaos Computer Club,CCC)&lt;/a&gt;的意见。当CCC有故事要发布时，那些媒体，甚至和计算机无关的媒体都会去。海盗党(The Pirate Party)，由名为c-base的黑客空间所创办，在2012获得了足够高的投票在4个州议会有了议席，并在欧洲议会有了一个议席。当然了不是每一个德国人都觉得”黑客”是好的，但从媒体的态度、政治以及社会影响上来看比起美国好了太多。   &lt;/p&gt;

&lt;p&gt;值得思考的是，这是如何实现的以及有什么建议可以给美国的黑客圈子。我没办法说我有所有的答案。部分的文章是为了通过比较引出一个话题。但重要的是思考为什么美国的黑客会被排斥而在德国的黑客就(几乎)和社会的普通群体一样呢，特别是在公开辩论需要更多的技术背景的情况下。   &lt;/p&gt;

&lt;h2 id=&quot;hacking-on-the-phone&quot;&gt;HACKING ON THE PHONE&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/war_games.jpg&quot; alt=&quot;War-games&quot; /&gt;
© Metro-Goldwyn-Mayer Studios Inc. All Rights Reserved.&lt;/p&gt;

&lt;p&gt;旁边这张美国黑客的照片是一个男人，甚至可能是一个青少年，独自一人接连几个小时试图攻破AT&amp;amp;T公司的系统或者在玩&lt;a href=&quot;https://en.wikipedia.org/wiki/WarGames&quot;&gt;War Game&lt;/a&gt;。在20世纪80年代这样的行为没有太大的错误，当然除了孤独的那部分。当时有一群人(phone phreaks)黑了电话，使其能够用来(非法)拨打免费电话。但他们通常团伙行动，彼此分享信息。免费的信息共享在&lt;a href=&quot;https://en.wikipedia.org/wiki/Legion_of_Doom_%28hacking%29&quot;&gt;毁灭军团(Legion of Doom’s)&lt;/a&gt;创办的&lt;a href=&quot;http://www.textfiles.com/magazines/LOD/&quot;&gt;杂志&lt;/a&gt;,&lt;a href=&quot;http://phrack.org/&quot;&gt;Phrack&lt;/a&gt;,&lt;a href=&quot;http://www.2600.com/&quot;&gt;2600&lt;/a&gt;以及无数的论坛(BBSes)中，并且都是开放的，但如果你访问过，这将是一个非常令人激动的事。   &lt;/p&gt;

&lt;p&gt;在当时，AT&amp;amp;T对长途电话进行垄断，并且价格很不合理。为了让一群志同道合的技术黑客能够一起进行交流，或者拨入境外的论坛，他们几乎必须要闯入AT&amp;amp;T的系统。这也成就了电话网络为当时最有趣也最富有挑战性的信息技术。但常见的关于电话phreaks的帖子都围绕着让彼此能够通信，也止步于此。&lt;/p&gt;

&lt;p&gt;德国黑客当时也处于非常类似的情况。德国也有电话垄断，但它比美国的AT&amp;amp;T限制性更大。在德国，不仅你只有一个电话运营商(&lt;a href=&quot;https://en.wikipedia.org/wiki/Deutsche_Bundespost&quot;&gt;Deutsche Bundespost&lt;/a&gt;)，而且运营商还是联邦政府所拥有的，也是当时最大的雇主。Bundespost可以通过法律要求用户使用特定的设备来接入网络,其中包含了一个在80年代来说贵得离谱的调制解调器(modem)。CCC早期有一些关于电话phreaking是针对Bundespost，这些的话，我将它归到”肯定会对其的合法性与道德产生争议”的目录，但这些活动同样将价格可接受的DIY modem带到了平常人的生活在，让他们能够彼此通信。虽然这个行为在法律上不合法，但我觉得在道德上是正确的，并且从技术上来说，这样的东西太酷了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/akustikkoppler_ccc_datenklo.jpg&quot; alt=&quot;Datenklo&quot; /&gt;
Photo: Johann H. Addicks / addicks@gmx.net   &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.offiziere.ch/trust-us/habi1/097_datenklo.html&quot;&gt;Datenklo&lt;/a&gt;(&lt;a href=&quot;https://translate.google.com/translate?sl=auto&amp;amp;tl=en&amp;amp;js=y&amp;amp;prev=_t&amp;amp;hl=en&amp;amp;ie=UTF-8&amp;amp;u=http%3A%2F%2Fwww.offiziere.ch%2Ftrust-us%2Fhabi1%2F097_datenklo.html&amp;amp;edit-text=&amp;amp;act=url&quot;&gt;谷歌翻译版&lt;/a&gt;)是一个运行在300比特率基于声音耦合的DIY modem。它的名字由”数据(data)”和”厕所(toilet)”两个单词混合而成。因为用来隔绝话筒的橡胶环和厕所密封管道用的材料大小是一样的。&lt;/p&gt;

&lt;p&gt;不好意思，跑题了;-)20世纪80年代早期在美国和德国的黑客行为主要分为”合法”以及”没那么合法”，人群主要为那些热爱探索技术以及热爱数字通信与打印媒体的人。当时所有人都通过电话phreaking来对抗运营商的垄断，因此他们能够聚在一起在背后偷偷谈论电话系统是如何运作并不被发现。因为当时最酷的就是进入电话系统。&lt;/p&gt;

&lt;p&gt;但接下来旅程变得不一样了。在20世纪90年代，美国的黑客们被排斥并且大多都分散在不同的地方，与此同时德国黑客们已经形成了一个强大的全国性组织，并在几个城市有了分舵。&lt;/p&gt;

&lt;h3 id=&quot;the-turn&quot;&gt;转变(THE TURN)&lt;/h3&gt;

&lt;p&gt;在美国，电话phreaking的黄金时代在1990年结束了，因为当时美国特勤局查封了很多用来架设论坛以及为黑客们提供服务的服务器。绝大部分的电话飞客(phreacks)都潜入地下了。黑客小组被当作“黑帮”来对待，并且在论坛上讨论电话系统内部的原理的人越来越多是为了犯罪而不是为了普通交流。数百台运行着可疑论坛的电脑被扣押数个月到数年，有的甚至都没有被起诉！于此同时美国政府将之前实施的用于保护政府电脑的法律&lt;a href=&quot;https://en.wikipedia.org/wiki/United_States_v._Morris_%281991%29&quot;&gt;延伸到了在互联网上的每一台电脑&lt;/a&gt;。
&lt;img src=&quot;/images/us-secretservice-starlogo.png&quot; alt=&quot;US-Secret-Services&quot; /&gt;
总的来说，这些事让美国的hacking”一夜回到解放前”。Hacking被认为是犯罪的行为，很多黑客团队都解散了，甚至有一小部分人遭受了牢狱之灾。Hacking在美国的所有社区都发生了翻天覆地的变化，至少有一段时间变得寂静，或者被迫要在地下世界里才拥有一片小天地。Bruce Sterling的&lt;a href=&quot;https://stuff.mit.edu/hacker/hacker.html&quot;&gt;The Hacker Crackdown&lt;/a&gt;在phreaking的后黄金时代是一本非常经典的编年史。&lt;/p&gt;

&lt;p&gt;在1990年，回过头来看&lt;a href=&quot;http://www.nytimes.com/1981/07/26/business/case-of-the-purloined-password.html?pagewanted=3&amp;amp;pagewanted=all&quot;&gt;纽约时报在1981年&lt;/a&gt;对于黑客已经”过时”的描述，不仅让人感到悲伤：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;黑客为技术上的专家;技艺精湛，通常很年轻，程序员，总是带着奇思秒想来试探计算机系统的防御系统，总是探寻着机器的极限和可能性，尽管他们总是看起来像是在破坏系统，在计算机行业中是重要的资产，通常来说非常有价值。   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;公众的舆论已经将黑客认为是离经叛道的人或者是罪犯。&lt;/p&gt;

&lt;h3 id=&quot;l0pht-heavy-industries&quot;&gt;L0PHT HEAVY INDUSTRIES&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/l0pht_logo.gif&quot; alt=&quot;L0pht&quot; /&gt;
但黑客总要hack点东西，大量根据地理分布而聚集在一起的黑客团队放弃了本地的活动。在20世纪90年代，&lt;a href=&quot;http://www.l0pht.com/&quot;&gt;L0pht&lt;/a&gt;为地上世界“存在”的黑客团队。但问题是这个“l0pht”和常见的黑客空间(hackerspace)一样:full of junk (ahem, inspirational technological raw material) and computers and smart folks interested in all of the above.&lt;/p&gt;

&lt;p&gt;在早期，L0pht有一堆好的文章，比如下面这篇&lt;a href=&quot;http://www.nytimes.com/1999/10/03/magazine/hack-counterhack.html?scp=2&amp;amp;sq=l0pht%20heavy&amp;amp;st=cse&quot;&gt;纽约时报上的文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可能美国的黑客与政府关系的高潮是当我们看到l0pht里的7个成员在美国参议院里为自己涉及美国国家安全的&lt;a href=&quot;https://www.youtube.com/watch?v=VVJldn_MmMY&quot;&gt;活动作证&lt;/a&gt;。参议员Fred Thompson为了减少打击介绍他们为“黑客智库”给其他参议员。有趣的是，最开始L0pht与政府扯上关系只是一个由&lt;a href=&quot;https://www.youtube.com/watch?v=axnWyPEly84&amp;amp;t=11m42s&quot;&gt;Mudge实施的防御演习&lt;/a&gt;，是为了提升名气并避免任何误解（不想被抓）。   &lt;/p&gt;

&lt;p&gt;来自L0pht的人们最后成为了Full Disclosure的早期拥护者，不管是&lt;a href=&quot;https://en.wikipedia.org/wiki/Responsible_disclosure&quot;&gt;负责任的揭露&lt;/a&gt;还是其他的形式。在20世纪90年代，他们的advisories是每一个对hacking和计算机安全有兴趣的人必读的读物。尽管L0pht所从事的事情并非所有都是严格意义上来说合法的，但可以确定的事他们正在做正确的事：正处于混沌中立与混沌善良之间。华盛顿邮报写了一个&lt;a href=&quot;http://www.washingtonpost.com/sf/business/2015/06/22/net-of-insecurity-part-3/&quot;&gt;关于l0pht的文章&lt;/a&gt;应该在你的阅读列表当中。&lt;/p&gt;

&lt;p&gt;我觉得l0pht最厉害的事为他们成为了一个“存在实体”的团队，而且他们对于修复有问题的东西有着强烈的动力，因为他们在公众中有着很高的知名度，所以他们清楚他们正在被监视。and there was an incentive to “behave” or at least to appear to be behaving. They got flack from both the black-hat hacker community for having “sold out” and from the software industry for being rogues.这是他们脚踏黑白两道的标志。而且，他们是有组织有计划的。   &lt;/p&gt;

&lt;p&gt;L0pht不再是一个民间的hackerspace，转而成为一个安全企业。他们成员根据自己商业模式不同都分离出去了。可以这么说，L0pht这个团队的后期，根据利益点的不同，有的成为hacking认证的商业公司，有的成为安全企业。在20世纪90年代后的美国，”hacking”在商业上并不成功。白帽黑客（也就是我们所知的“安全研究员”）和黑帽黑客之间的分歧越来越明显。一面是高薪，一面是合法的环境，在这样的大环境下，留给像l0pht这样处于中间的机会已经不多了。这对于美国的黑客文化是一个非常危险坑，特别是对于那些没有足够的水平到喜欢玩弄计算机的年轻人。在整个文化中，他们要处于什么位置呢？&lt;/p&gt;

&lt;h3 id=&quot;today-the-usa-tomorrow-germany&quot;&gt;TODAY THE USA, TOMORROW GERMANY&lt;/h3&gt;

&lt;p&gt;在美国的黑客文化中，从开放和社区化到全面潜入地下(underground)绕了很长的远路(除了剩下几个在公众的视野当中)。明天，我将从19世纪80年代开始，讲述同一时期德国的黑客历史，讨论一下两国的黑客场景以及美国的黑客可以从中学习的地方。如果你同意这个观点，在美国的黑客场景下还有很多工作可以做。敬请期待。&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Feb 2016 06:05:05 +0800</pubDate>
        <link>http://www.hardenedlinux.org/translation/2016/02/13/Hackers-and-heroes-a-tale-of-two-countries.html</link>
        <guid isPermaLink="true">http://www.hardenedlinux.org/translation/2016/02/13/Hackers-and-heroes-a-tale-of-two-countries.html</guid>
        
        
        <category>translation</category>
        
      </item>
    
      <item>
        <title>An Introduction to Linux Kernel Exploitation</title>
        <description>&lt;p&gt;By Pray3r&lt;/p&gt;

&lt;h3 id=&quot;about-this-documentation&quot;&gt;-[ 0. About this documentation&lt;/h3&gt;
&lt;p&gt;I am researching linux kernel exploitation for the outline and reference books/papers. I will keep update this list and share some of my findings on &lt;a href=&quot;http://hardenedlinux.org&quot;&gt;HardenedLinux&lt;/a&gt;. If you have any questions or suggestions don’t hesitate to contact &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#112;&amp;#114;&amp;#097;&amp;#121;&amp;#051;&amp;#114;&amp;#046;&amp;#122;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;me&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;review&quot;&gt;-[ 1. Review&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Linux Memory Management&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;-[ 2. Exploitation&lt;/h3&gt;

&lt;h4 id=&quot;attack-surface&quot;&gt;-[ 2.1 Attack Surface&lt;/h4&gt;

&lt;h4 id=&quot;a-taxonomy-of-kernel-vulnerabilities&quot;&gt;-[ 2.2 A Taxonomy of Kernel Vulnerabilities&lt;/h4&gt;

&lt;h4 id=&quot;finding-vulnsbugs&quot;&gt;-[ 2.3 Finding VULNS/BUGS&lt;/h4&gt;

&lt;h5 id=&quot;fuzzing&quot;&gt;-[ 2.3.1 Fuzzing&lt;/h5&gt;
&lt;p&gt;Reading/Modifying these tools’ code, and I try to write new one.
- &lt;a href=&quot;https://github.com/kernelslacker/trinity&quot;&gt;trinity&lt;/a&gt;
- &lt;a href=&quot;https://github.com/google/kasanf&quot;&gt;kasan&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;code-audit&quot;&gt;-[ 2.3.2 Code Audit&lt;/h5&gt;

&lt;h4 id=&quot;kernel-exploitation&quot;&gt;-[ 2.4 Kernel Exploitation&lt;/h4&gt;

&lt;h4 id=&quot;bypass-self-protection-stable-exploit&quot;&gt;-[ 2.5 Bypass Self-protection (Stable Exploit)&lt;/h4&gt;

&lt;h3 id=&quot;reference-books&quot;&gt;-[ 3. Reference Books&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Linux Kernel Development, 3rd Edition – &lt;em&gt;Robert Love&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.com/Linux-Kernel-Development-3rd-Edition/dp/0672329468&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Understand Linux Kernel, 3rd Edition – &lt;em&gt;Daniel P. Bovet, Marco Cesati&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.com/Understanding-Linux-Kernel-Third-Edition/dp/0596005652&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Linux Device Drivers, 3rd  Edition – &lt;em&gt;Jonathan Corbet, Alessandro Rubini, Greg Kroah-Hartman&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.com/Linux-Device-Drivers-3rd-Edition/dp/0596005903&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Understanding Linux Network Internals – &lt;em&gt;Christian Benvenuti&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.com/Understanding-Network-Internals-Christian-Benvenuti/dp/0596002556&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Understanding The Linux Virtual Memory Manager – &lt;em&gt;Mel Gorman&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.ca/Understanding-Linux-Virtual-Memory-Manager/dp/0131453483&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;A Bug Hunter’s Diary: A Guided Tour Through the Wilds of Software Security – &lt;em&gt;Tobias Klein&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.com/Bug-Hunters-Diary-Software-Security/dp/1593273851&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Hacking: The Art of Exploitation, 2nd Edition – &lt;em&gt;Jon Erickson&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.com/Hacking-The-Art-Exploitation-Edition/dp/1593271441&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;A Guide to Kernel Exploitation: Attacking the Core –  &lt;em&gt;Enrico Perla B.Sc. Computer Science University of Torino M.Sc. Computer Science Trinity College Dublin, Massimiliano Oldani&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.com/Guide-Kernel-Exploitation-Attacking-Core/dp/1597494860&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;The Art of Software Security Assessment: Identifying and Preventing Software Vulnerabilities –  &lt;em&gt;Mark Dowd, John McDonald, Justin Schuh&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.com/The-Software-Security-Assessment-Vulnerabilities/dp/0321444426&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Fuzzing: Brute Force Vulnerability Discovery – &lt;em&gt;Michael Sutton, Adam Greene, Pedram Amini&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.com/Fuzzing-Brute-Force-Vulnerability-Discovery/dp/0321446119&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Fuzzing for Software Security Testing and Quality Assuranc – &lt;em&gt;Ari Takanen, Jared DeMott, Charlie Miller&lt;/em&gt; [&lt;a href=&quot;http://www.amazon.com/Fuzzing-Software-Security-Assurance-Information/dp/1596932147&quot;&gt;Amazon&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference-papers&quot;&gt;-[ 4. Reference Papers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html&quot;&gt;Intel® 64 and IA-32 Architectures Software Developer Manuals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://phrack.org/archives/issues/64/6.txt&quot;&gt;Attacking the Core : Kernel Exploiting Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://phrack.org/archives/issues/66/15.txt&quot;&gt;Linux Kernel Heap Tampering Detection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jon.oberheide.org/blog/2010/09/10/linux-kernel-can-slub-overflow/&quot;&gt;Linux Kernel CAN SLUB Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vsecurity.com/download/papers/slob-exploitation.pdf&quot;&gt;A Heap of Trouble: Breaking the Linux Kernel SLOB Allocator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fi.muni.cz/~xslaby/sklad/teze.pdf&quot;&gt;Automatic Bug-finding Techniques for Linux Kernel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/legacy/events/woot11/tech/final_files/Yamaguchi.pdf&quot;&gt;Vulnerability Extrapolation: Assisted Discovery of Vulnerabilities Using Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cybersecurity.upv.es/attacks/offset2lib/offset2lib.html&quot;&gt;Offset2lib: bypassing full ASLR on 64bit Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://crypto.stanford.edu/~blynn/rop/&quot;&gt;64-bit Linux Return-Oriented Programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://insecure.org/sploits/non-executable.stack.problems.html&quot;&gt;Defeating Solar Designer’s Non-executable Stack Patch Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codearcana.com/posts/2013/05/28/introduction-to-return-oriented-programming-rop.html&quot;&gt;Introduction to return oriented programming (ROP)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://phrack.org/archives/issues/58/4.txt&quot;&gt;The advanced return-into-lib(c) exploits: PaX case study&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 20 Jan 2016 02:26:37 +0800</pubDate>
        <link>http://www.hardenedlinux.org/system-security/2016/01/20/an-introduction-to-linux-kernel-exploitation.html</link>
        <guid isPermaLink="true">http://www.hardenedlinux.org/system-security/2016/01/20/an-introduction-to-linux-kernel-exploitation.html</guid>
        
        
        <category>system-security</category>
        
      </item>
    
  </channel>
</rss>
